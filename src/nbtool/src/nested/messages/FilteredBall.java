// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vision.proto

package messages;

/**
 * Protobuf type {@code messages.FilteredBall}
 */
public final class FilteredBall extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:messages.FilteredBall)
    FilteredBallOrBuilder {
  // Use FilteredBall.newBuilder() to construct.
  private FilteredBall(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private FilteredBall(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final FilteredBall defaultInstance;
  public static FilteredBall getDefaultInstance() {
    return defaultInstance;
  }

  public FilteredBall getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final com.google.protobuf.UnknownFieldSet unknownFields;
  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private FilteredBall(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            messages.VBall.Builder subBuilder = null;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
              subBuilder = vis_.toBuilder();
            }
            vis_ = input.readMessage(messages.VBall.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(vis_);
              vis_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000001;
            break;
          }
          case 21: {
            bitField0_ |= 0x00000002;
            distance_ = input.readFloat();
            break;
          }
          case 29: {
            bitField0_ |= 0x00000004;
            bearing_ = input.readFloat();
            break;
          }
          case 37: {
            bitField0_ |= 0x00000008;
            relX_ = input.readFloat();
            break;
          }
          case 45: {
            bitField0_ |= 0x00000010;
            relY_ = input.readFloat();
            break;
          }
          case 53: {
            bitField0_ |= 0x00000020;
            velX_ = input.readFloat();
            break;
          }
          case 61: {
            bitField0_ |= 0x00000040;
            velY_ = input.readFloat();
            break;
          }
          case 69: {
            bitField0_ |= 0x00000080;
            varRelX_ = input.readFloat();
            break;
          }
          case 77: {
            bitField0_ |= 0x00000100;
            varRelY_ = input.readFloat();
            break;
          }
          case 85: {
            bitField0_ |= 0x00000200;
            varVelX_ = input.readFloat();
            break;
          }
          case 93: {
            bitField0_ |= 0x00000400;
            varVelY_ = input.readFloat();
            break;
          }
          case 96: {
            bitField0_ |= 0x00000800;
            isStationary_ = input.readBool();
            break;
          }
          case 109: {
            bitField0_ |= 0x00001000;
            bearingDeg_ = input.readFloat();
            break;
          }
          case 117: {
            bitField0_ |= 0x00002000;
            x_ = input.readFloat();
            break;
          }
          case 125: {
            bitField0_ |= 0x00004000;
            y_ = input.readFloat();
            break;
          }
          case 133: {
            bitField0_ |= 0x00008000;
            relXDest_ = input.readFloat();
            break;
          }
          case 141: {
            bitField0_ |= 0x00010000;
            relYDest_ = input.readFloat();
            break;
          }
          case 149: {
            bitField0_ |= 0x00020000;
            speed_ = input.readFloat();
            break;
          }
          case 157: {
            bitField0_ |= 0x00040000;
            relYIntersectDest_ = input.readFloat();
            break;
          }
          case 165: {
            bitField0_ |= 0x00080000;
            statRelX_ = input.readFloat();
            break;
          }
          case 173: {
            bitField0_ |= 0x00100000;
            statRelY_ = input.readFloat();
            break;
          }
          case 181: {
            bitField0_ |= 0x00200000;
            statDistance_ = input.readFloat();
            break;
          }
          case 189: {
            bitField0_ |= 0x00400000;
            statBearing_ = input.readFloat();
            break;
          }
          case 197: {
            bitField0_ |= 0x00800000;
            movRelX_ = input.readFloat();
            break;
          }
          case 205: {
            bitField0_ |= 0x01000000;
            movRelY_ = input.readFloat();
            break;
          }
          case 213: {
            bitField0_ |= 0x02000000;
            movDistance_ = input.readFloat();
            break;
          }
          case 221: {
            bitField0_ |= 0x04000000;
            movBearing_ = input.readFloat();
            break;
          }
          case 229: {
            bitField0_ |= 0x08000000;
            movVelX_ = input.readFloat();
            break;
          }
          case 237: {
            bitField0_ |= 0x10000000;
            movVelY_ = input.readFloat();
            break;
          }
          case 245: {
            bitField0_ |= 0x20000000;
            movSpeed_ = input.readFloat();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return messages._File_Vision.internal_static_messages_FilteredBall_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return messages._File_Vision.internal_static_messages_FilteredBall_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            messages.FilteredBall.class, messages.FilteredBall.Builder.class);
  }

  public static com.google.protobuf.Parser<FilteredBall> PARSER =
      new com.google.protobuf.AbstractParser<FilteredBall>() {
    public FilteredBall parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new FilteredBall(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<FilteredBall> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int VIS_FIELD_NUMBER = 1;
  private messages.VBall vis_;
  /**
   * <code>optional .messages.VBall vis = 1;</code>
   */
  public boolean hasVis() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional .messages.VBall vis = 1;</code>
   */
  public messages.VBall getVis() {
    return vis_;
  }
  /**
   * <code>optional .messages.VBall vis = 1;</code>
   */
  public messages.VBallOrBuilder getVisOrBuilder() {
    return vis_;
  }

  public static final int DISTANCE_FIELD_NUMBER = 2;
  private float distance_;
  /**
   * <code>optional float distance = 2;</code>
   */
  public boolean hasDistance() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional float distance = 2;</code>
   */
  public float getDistance() {
    return distance_;
  }

  public static final int BEARING_FIELD_NUMBER = 3;
  private float bearing_;
  /**
   * <code>optional float bearing = 3;</code>
   */
  public boolean hasBearing() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional float bearing = 3;</code>
   */
  public float getBearing() {
    return bearing_;
  }

  public static final int REL_X_FIELD_NUMBER = 4;
  private float relX_;
  /**
   * <code>optional float rel_x = 4;</code>
   *
   * <pre>
   * State of best filter
   * </pre>
   */
  public boolean hasRelX() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional float rel_x = 4;</code>
   *
   * <pre>
   * State of best filter
   * </pre>
   */
  public float getRelX() {
    return relX_;
  }

  public static final int REL_Y_FIELD_NUMBER = 5;
  private float relY_;
  /**
   * <code>optional float rel_y = 5;</code>
   */
  public boolean hasRelY() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional float rel_y = 5;</code>
   */
  public float getRelY() {
    return relY_;
  }

  public static final int VEL_X_FIELD_NUMBER = 6;
  private float velX_;
  /**
   * <code>optional float vel_x = 6;</code>
   */
  public boolean hasVelX() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>optional float vel_x = 6;</code>
   */
  public float getVelX() {
    return velX_;
  }

  public static final int VEL_Y_FIELD_NUMBER = 7;
  private float velY_;
  /**
   * <code>optional float vel_y = 7;</code>
   */
  public boolean hasVelY() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <code>optional float vel_y = 7;</code>
   */
  public float getVelY() {
    return velY_;
  }

  public static final int VAR_REL_X_FIELD_NUMBER = 8;
  private float varRelX_;
  /**
   * <code>optional float var_rel_x = 8;</code>
   */
  public boolean hasVarRelX() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional float var_rel_x = 8;</code>
   */
  public float getVarRelX() {
    return varRelX_;
  }

  public static final int VAR_REL_Y_FIELD_NUMBER = 9;
  private float varRelY_;
  /**
   * <code>optional float var_rel_y = 9;</code>
   */
  public boolean hasVarRelY() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <code>optional float var_rel_y = 9;</code>
   */
  public float getVarRelY() {
    return varRelY_;
  }

  public static final int VAR_VEL_X_FIELD_NUMBER = 10;
  private float varVelX_;
  /**
   * <code>optional float var_vel_x = 10;</code>
   */
  public boolean hasVarVelX() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <code>optional float var_vel_x = 10;</code>
   */
  public float getVarVelX() {
    return varVelX_;
  }

  public static final int VAR_VEL_Y_FIELD_NUMBER = 11;
  private float varVelY_;
  /**
   * <code>optional float var_vel_y = 11;</code>
   */
  public boolean hasVarVelY() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <code>optional float var_vel_y = 11;</code>
   */
  public float getVarVelY() {
    return varVelY_;
  }

  public static final int IS_STATIONARY_FIELD_NUMBER = 12;
  private boolean isStationary_;
  /**
   * <code>optional bool is_stationary = 12;</code>
   */
  public boolean hasIsStationary() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <code>optional bool is_stationary = 12;</code>
   */
  public boolean getIsStationary() {
    return isStationary_;
  }

  public static final int BEARING_DEG_FIELD_NUMBER = 13;
  private float bearingDeg_;
  /**
   * <code>optional float bearing_deg = 13;</code>
   */
  public boolean hasBearingDeg() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <code>optional float bearing_deg = 13;</code>
   */
  public float getBearingDeg() {
    return bearingDeg_;
  }

  public static final int X_FIELD_NUMBER = 14;
  private float x_;
  /**
   * <code>optional float x = 14;</code>
   */
  public boolean hasX() {
    return ((bitField0_ & 0x00002000) == 0x00002000);
  }
  /**
   * <code>optional float x = 14;</code>
   */
  public float getX() {
    return x_;
  }

  public static final int Y_FIELD_NUMBER = 15;
  private float y_;
  /**
   * <code>optional float y = 15;</code>
   */
  public boolean hasY() {
    return ((bitField0_ & 0x00004000) == 0x00004000);
  }
  /**
   * <code>optional float y = 15;</code>
   */
  public float getY() {
    return y_;
  }

  public static final int REL_X_DEST_FIELD_NUMBER = 16;
  private float relXDest_;
  /**
   * <code>optional float rel_x_dest = 16;</code>
   */
  public boolean hasRelXDest() {
    return ((bitField0_ & 0x00008000) == 0x00008000);
  }
  /**
   * <code>optional float rel_x_dest = 16;</code>
   */
  public float getRelXDest() {
    return relXDest_;
  }

  public static final int REL_Y_DEST_FIELD_NUMBER = 17;
  private float relYDest_;
  /**
   * <code>optional float rel_y_dest = 17;</code>
   */
  public boolean hasRelYDest() {
    return ((bitField0_ & 0x00010000) == 0x00010000);
  }
  /**
   * <code>optional float rel_y_dest = 17;</code>
   */
  public float getRelYDest() {
    return relYDest_;
  }

  public static final int SPEED_FIELD_NUMBER = 18;
  private float speed_;
  /**
   * <code>optional float speed = 18;</code>
   *
   * <pre>
   * For Goalie, know where the ball is going to intersect y-axis
   * </pre>
   */
  public boolean hasSpeed() {
    return ((bitField0_ & 0x00020000) == 0x00020000);
  }
  /**
   * <code>optional float speed = 18;</code>
   *
   * <pre>
   * For Goalie, know where the ball is going to intersect y-axis
   * </pre>
   */
  public float getSpeed() {
    return speed_;
  }

  public static final int REL_Y_INTERSECT_DEST_FIELD_NUMBER = 19;
  private float relYIntersectDest_;
  /**
   * <code>optional float rel_y_intersect_dest = 19;</code>
   */
  public boolean hasRelYIntersectDest() {
    return ((bitField0_ & 0x00040000) == 0x00040000);
  }
  /**
   * <code>optional float rel_y_intersect_dest = 19;</code>
   */
  public float getRelYIntersectDest() {
    return relYIntersectDest_;
  }

  public static final int STAT_REL_X_FIELD_NUMBER = 20;
  private float statRelX_;
  /**
   * <code>optional float stat_rel_x = 20;</code>
   */
  public boolean hasStatRelX() {
    return ((bitField0_ & 0x00080000) == 0x00080000);
  }
  /**
   * <code>optional float stat_rel_x = 20;</code>
   */
  public float getStatRelX() {
    return statRelX_;
  }

  public static final int STAT_REL_Y_FIELD_NUMBER = 21;
  private float statRelY_;
  /**
   * <code>optional float stat_rel_y = 21;</code>
   */
  public boolean hasStatRelY() {
    return ((bitField0_ & 0x00100000) == 0x00100000);
  }
  /**
   * <code>optional float stat_rel_y = 21;</code>
   */
  public float getStatRelY() {
    return statRelY_;
  }

  public static final int STAT_DISTANCE_FIELD_NUMBER = 22;
  private float statDistance_;
  /**
   * <code>optional float stat_distance = 22;</code>
   */
  public boolean hasStatDistance() {
    return ((bitField0_ & 0x00200000) == 0x00200000);
  }
  /**
   * <code>optional float stat_distance = 22;</code>
   */
  public float getStatDistance() {
    return statDistance_;
  }

  public static final int STAT_BEARING_FIELD_NUMBER = 23;
  private float statBearing_;
  /**
   * <code>optional float stat_bearing = 23;</code>
   */
  public boolean hasStatBearing() {
    return ((bitField0_ & 0x00400000) == 0x00400000);
  }
  /**
   * <code>optional float stat_bearing = 23;</code>
   */
  public float getStatBearing() {
    return statBearing_;
  }

  public static final int MOV_REL_X_FIELD_NUMBER = 24;
  private float movRelX_;
  /**
   * <code>optional float mov_rel_x = 24;</code>
   */
  public boolean hasMovRelX() {
    return ((bitField0_ & 0x00800000) == 0x00800000);
  }
  /**
   * <code>optional float mov_rel_x = 24;</code>
   */
  public float getMovRelX() {
    return movRelX_;
  }

  public static final int MOV_REL_Y_FIELD_NUMBER = 25;
  private float movRelY_;
  /**
   * <code>optional float mov_rel_y = 25;</code>
   */
  public boolean hasMovRelY() {
    return ((bitField0_ & 0x01000000) == 0x01000000);
  }
  /**
   * <code>optional float mov_rel_y = 25;</code>
   */
  public float getMovRelY() {
    return movRelY_;
  }

  public static final int MOV_DISTANCE_FIELD_NUMBER = 26;
  private float movDistance_;
  /**
   * <code>optional float mov_distance = 26;</code>
   */
  public boolean hasMovDistance() {
    return ((bitField0_ & 0x02000000) == 0x02000000);
  }
  /**
   * <code>optional float mov_distance = 26;</code>
   */
  public float getMovDistance() {
    return movDistance_;
  }

  public static final int MOV_BEARING_FIELD_NUMBER = 27;
  private float movBearing_;
  /**
   * <code>optional float mov_bearing = 27;</code>
   */
  public boolean hasMovBearing() {
    return ((bitField0_ & 0x04000000) == 0x04000000);
  }
  /**
   * <code>optional float mov_bearing = 27;</code>
   */
  public float getMovBearing() {
    return movBearing_;
  }

  public static final int MOV_VEL_X_FIELD_NUMBER = 28;
  private float movVelX_;
  /**
   * <code>optional float mov_vel_x = 28;</code>
   */
  public boolean hasMovVelX() {
    return ((bitField0_ & 0x08000000) == 0x08000000);
  }
  /**
   * <code>optional float mov_vel_x = 28;</code>
   */
  public float getMovVelX() {
    return movVelX_;
  }

  public static final int MOV_VEL_Y_FIELD_NUMBER = 29;
  private float movVelY_;
  /**
   * <code>optional float mov_vel_y = 29;</code>
   */
  public boolean hasMovVelY() {
    return ((bitField0_ & 0x10000000) == 0x10000000);
  }
  /**
   * <code>optional float mov_vel_y = 29;</code>
   */
  public float getMovVelY() {
    return movVelY_;
  }

  public static final int MOV_SPEED_FIELD_NUMBER = 30;
  private float movSpeed_;
  /**
   * <code>optional float mov_speed = 30;</code>
   */
  public boolean hasMovSpeed() {
    return ((bitField0_ & 0x20000000) == 0x20000000);
  }
  /**
   * <code>optional float mov_speed = 30;</code>
   */
  public float getMovSpeed() {
    return movSpeed_;
  }

  private void initFields() {
    vis_ = messages.VBall.getDefaultInstance();
    distance_ = 0F;
    bearing_ = 0F;
    relX_ = 0F;
    relY_ = 0F;
    velX_ = 0F;
    velY_ = 0F;
    varRelX_ = 0F;
    varRelY_ = 0F;
    varVelX_ = 0F;
    varVelY_ = 0F;
    isStationary_ = false;
    bearingDeg_ = 0F;
    x_ = 0F;
    y_ = 0F;
    relXDest_ = 0F;
    relYDest_ = 0F;
    speed_ = 0F;
    relYIntersectDest_ = 0F;
    statRelX_ = 0F;
    statRelY_ = 0F;
    statDistance_ = 0F;
    statBearing_ = 0F;
    movRelX_ = 0F;
    movRelY_ = 0F;
    movDistance_ = 0F;
    movBearing_ = 0F;
    movVelX_ = 0F;
    movVelY_ = 0F;
    movSpeed_ = 0F;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(1, vis_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeFloat(2, distance_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeFloat(3, bearing_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeFloat(4, relX_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeFloat(5, relY_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeFloat(6, velX_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeFloat(7, velY_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeFloat(8, varRelX_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeFloat(9, varRelY_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeFloat(10, varVelX_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeFloat(11, varVelY_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeBool(12, isStationary_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeFloat(13, bearingDeg_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      output.writeFloat(14, x_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      output.writeFloat(15, y_);
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      output.writeFloat(16, relXDest_);
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      output.writeFloat(17, relYDest_);
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      output.writeFloat(18, speed_);
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      output.writeFloat(19, relYIntersectDest_);
    }
    if (((bitField0_ & 0x00080000) == 0x00080000)) {
      output.writeFloat(20, statRelX_);
    }
    if (((bitField0_ & 0x00100000) == 0x00100000)) {
      output.writeFloat(21, statRelY_);
    }
    if (((bitField0_ & 0x00200000) == 0x00200000)) {
      output.writeFloat(22, statDistance_);
    }
    if (((bitField0_ & 0x00400000) == 0x00400000)) {
      output.writeFloat(23, statBearing_);
    }
    if (((bitField0_ & 0x00800000) == 0x00800000)) {
      output.writeFloat(24, movRelX_);
    }
    if (((bitField0_ & 0x01000000) == 0x01000000)) {
      output.writeFloat(25, movRelY_);
    }
    if (((bitField0_ & 0x02000000) == 0x02000000)) {
      output.writeFloat(26, movDistance_);
    }
    if (((bitField0_ & 0x04000000) == 0x04000000)) {
      output.writeFloat(27, movBearing_);
    }
    if (((bitField0_ & 0x08000000) == 0x08000000)) {
      output.writeFloat(28, movVelX_);
    }
    if (((bitField0_ & 0x10000000) == 0x10000000)) {
      output.writeFloat(29, movVelY_);
    }
    if (((bitField0_ & 0x20000000) == 0x20000000)) {
      output.writeFloat(30, movSpeed_);
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, vis_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(2, distance_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(3, bearing_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(4, relX_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(5, relY_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(6, velX_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(7, velY_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(8, varRelX_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(9, varRelY_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(10, varVelX_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(11, varVelY_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(12, isStationary_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(13, bearingDeg_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(14, x_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(15, y_);
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(16, relXDest_);
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(17, relYDest_);
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(18, speed_);
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(19, relYIntersectDest_);
    }
    if (((bitField0_ & 0x00080000) == 0x00080000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(20, statRelX_);
    }
    if (((bitField0_ & 0x00100000) == 0x00100000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(21, statRelY_);
    }
    if (((bitField0_ & 0x00200000) == 0x00200000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(22, statDistance_);
    }
    if (((bitField0_ & 0x00400000) == 0x00400000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(23, statBearing_);
    }
    if (((bitField0_ & 0x00800000) == 0x00800000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(24, movRelX_);
    }
    if (((bitField0_ & 0x01000000) == 0x01000000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(25, movRelY_);
    }
    if (((bitField0_ & 0x02000000) == 0x02000000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(26, movDistance_);
    }
    if (((bitField0_ & 0x04000000) == 0x04000000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(27, movBearing_);
    }
    if (((bitField0_ & 0x08000000) == 0x08000000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(28, movVelX_);
    }
    if (((bitField0_ & 0x10000000) == 0x10000000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(29, movVelY_);
    }
    if (((bitField0_ & 0x20000000) == 0x20000000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(30, movSpeed_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static messages.FilteredBall parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static messages.FilteredBall parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static messages.FilteredBall parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static messages.FilteredBall parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static messages.FilteredBall parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static messages.FilteredBall parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static messages.FilteredBall parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static messages.FilteredBall parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static messages.FilteredBall parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static messages.FilteredBall parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(messages.FilteredBall prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code messages.FilteredBall}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:messages.FilteredBall)
      messages.FilteredBallOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return messages._File_Vision.internal_static_messages_FilteredBall_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return messages._File_Vision.internal_static_messages_FilteredBall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              messages.FilteredBall.class, messages.FilteredBall.Builder.class);
    }

    // Construct using messages.FilteredBall.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        getVisFieldBuilder();
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      if (visBuilder_ == null) {
        vis_ = messages.VBall.getDefaultInstance();
      } else {
        visBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      distance_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000002);
      bearing_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000004);
      relX_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000008);
      relY_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000010);
      velX_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000020);
      velY_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000040);
      varRelX_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000080);
      varRelY_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000100);
      varVelX_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000200);
      varVelY_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000400);
      isStationary_ = false;
      bitField0_ = (bitField0_ & ~0x00000800);
      bearingDeg_ = 0F;
      bitField0_ = (bitField0_ & ~0x00001000);
      x_ = 0F;
      bitField0_ = (bitField0_ & ~0x00002000);
      y_ = 0F;
      bitField0_ = (bitField0_ & ~0x00004000);
      relXDest_ = 0F;
      bitField0_ = (bitField0_ & ~0x00008000);
      relYDest_ = 0F;
      bitField0_ = (bitField0_ & ~0x00010000);
      speed_ = 0F;
      bitField0_ = (bitField0_ & ~0x00020000);
      relYIntersectDest_ = 0F;
      bitField0_ = (bitField0_ & ~0x00040000);
      statRelX_ = 0F;
      bitField0_ = (bitField0_ & ~0x00080000);
      statRelY_ = 0F;
      bitField0_ = (bitField0_ & ~0x00100000);
      statDistance_ = 0F;
      bitField0_ = (bitField0_ & ~0x00200000);
      statBearing_ = 0F;
      bitField0_ = (bitField0_ & ~0x00400000);
      movRelX_ = 0F;
      bitField0_ = (bitField0_ & ~0x00800000);
      movRelY_ = 0F;
      bitField0_ = (bitField0_ & ~0x01000000);
      movDistance_ = 0F;
      bitField0_ = (bitField0_ & ~0x02000000);
      movBearing_ = 0F;
      bitField0_ = (bitField0_ & ~0x04000000);
      movVelX_ = 0F;
      bitField0_ = (bitField0_ & ~0x08000000);
      movVelY_ = 0F;
      bitField0_ = (bitField0_ & ~0x10000000);
      movSpeed_ = 0F;
      bitField0_ = (bitField0_ & ~0x20000000);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return messages._File_Vision.internal_static_messages_FilteredBall_descriptor;
    }

    public messages.FilteredBall getDefaultInstanceForType() {
      return messages.FilteredBall.getDefaultInstance();
    }

    public messages.FilteredBall build() {
      messages.FilteredBall result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public messages.FilteredBall buildPartial() {
      messages.FilteredBall result = new messages.FilteredBall(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      if (visBuilder_ == null) {
        result.vis_ = vis_;
      } else {
        result.vis_ = visBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.distance_ = distance_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.bearing_ = bearing_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.relX_ = relX_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.relY_ = relY_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.velX_ = velX_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000040;
      }
      result.velY_ = velY_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000080;
      }
      result.varRelX_ = varRelX_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000100;
      }
      result.varRelY_ = varRelY_;
      if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
        to_bitField0_ |= 0x00000200;
      }
      result.varVelX_ = varVelX_;
      if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
        to_bitField0_ |= 0x00000400;
      }
      result.varVelY_ = varVelY_;
      if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
        to_bitField0_ |= 0x00000800;
      }
      result.isStationary_ = isStationary_;
      if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
        to_bitField0_ |= 0x00001000;
      }
      result.bearingDeg_ = bearingDeg_;
      if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
        to_bitField0_ |= 0x00002000;
      }
      result.x_ = x_;
      if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
        to_bitField0_ |= 0x00004000;
      }
      result.y_ = y_;
      if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
        to_bitField0_ |= 0x00008000;
      }
      result.relXDest_ = relXDest_;
      if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
        to_bitField0_ |= 0x00010000;
      }
      result.relYDest_ = relYDest_;
      if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
        to_bitField0_ |= 0x00020000;
      }
      result.speed_ = speed_;
      if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
        to_bitField0_ |= 0x00040000;
      }
      result.relYIntersectDest_ = relYIntersectDest_;
      if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
        to_bitField0_ |= 0x00080000;
      }
      result.statRelX_ = statRelX_;
      if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
        to_bitField0_ |= 0x00100000;
      }
      result.statRelY_ = statRelY_;
      if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
        to_bitField0_ |= 0x00200000;
      }
      result.statDistance_ = statDistance_;
      if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
        to_bitField0_ |= 0x00400000;
      }
      result.statBearing_ = statBearing_;
      if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
        to_bitField0_ |= 0x00800000;
      }
      result.movRelX_ = movRelX_;
      if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
        to_bitField0_ |= 0x01000000;
      }
      result.movRelY_ = movRelY_;
      if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
        to_bitField0_ |= 0x02000000;
      }
      result.movDistance_ = movDistance_;
      if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
        to_bitField0_ |= 0x04000000;
      }
      result.movBearing_ = movBearing_;
      if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
        to_bitField0_ |= 0x08000000;
      }
      result.movVelX_ = movVelX_;
      if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
        to_bitField0_ |= 0x10000000;
      }
      result.movVelY_ = movVelY_;
      if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
        to_bitField0_ |= 0x20000000;
      }
      result.movSpeed_ = movSpeed_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof messages.FilteredBall) {
        return mergeFrom((messages.FilteredBall)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(messages.FilteredBall other) {
      if (other == messages.FilteredBall.getDefaultInstance()) return this;
      if (other.hasVis()) {
        mergeVis(other.getVis());
      }
      if (other.hasDistance()) {
        setDistance(other.getDistance());
      }
      if (other.hasBearing()) {
        setBearing(other.getBearing());
      }
      if (other.hasRelX()) {
        setRelX(other.getRelX());
      }
      if (other.hasRelY()) {
        setRelY(other.getRelY());
      }
      if (other.hasVelX()) {
        setVelX(other.getVelX());
      }
      if (other.hasVelY()) {
        setVelY(other.getVelY());
      }
      if (other.hasVarRelX()) {
        setVarRelX(other.getVarRelX());
      }
      if (other.hasVarRelY()) {
        setVarRelY(other.getVarRelY());
      }
      if (other.hasVarVelX()) {
        setVarVelX(other.getVarVelX());
      }
      if (other.hasVarVelY()) {
        setVarVelY(other.getVarVelY());
      }
      if (other.hasIsStationary()) {
        setIsStationary(other.getIsStationary());
      }
      if (other.hasBearingDeg()) {
        setBearingDeg(other.getBearingDeg());
      }
      if (other.hasX()) {
        setX(other.getX());
      }
      if (other.hasY()) {
        setY(other.getY());
      }
      if (other.hasRelXDest()) {
        setRelXDest(other.getRelXDest());
      }
      if (other.hasRelYDest()) {
        setRelYDest(other.getRelYDest());
      }
      if (other.hasSpeed()) {
        setSpeed(other.getSpeed());
      }
      if (other.hasRelYIntersectDest()) {
        setRelYIntersectDest(other.getRelYIntersectDest());
      }
      if (other.hasStatRelX()) {
        setStatRelX(other.getStatRelX());
      }
      if (other.hasStatRelY()) {
        setStatRelY(other.getStatRelY());
      }
      if (other.hasStatDistance()) {
        setStatDistance(other.getStatDistance());
      }
      if (other.hasStatBearing()) {
        setStatBearing(other.getStatBearing());
      }
      if (other.hasMovRelX()) {
        setMovRelX(other.getMovRelX());
      }
      if (other.hasMovRelY()) {
        setMovRelY(other.getMovRelY());
      }
      if (other.hasMovDistance()) {
        setMovDistance(other.getMovDistance());
      }
      if (other.hasMovBearing()) {
        setMovBearing(other.getMovBearing());
      }
      if (other.hasMovVelX()) {
        setMovVelX(other.getMovVelX());
      }
      if (other.hasMovVelY()) {
        setMovVelY(other.getMovVelY());
      }
      if (other.hasMovSpeed()) {
        setMovSpeed(other.getMovSpeed());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      messages.FilteredBall parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (messages.FilteredBall) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private messages.VBall vis_ = messages.VBall.getDefaultInstance();
    private com.google.protobuf.SingleFieldBuilder<
        messages.VBall, messages.VBall.Builder, messages.VBallOrBuilder> visBuilder_;
    /**
     * <code>optional .messages.VBall vis = 1;</code>
     */
    public boolean hasVis() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .messages.VBall vis = 1;</code>
     */
    public messages.VBall getVis() {
      if (visBuilder_ == null) {
        return vis_;
      } else {
        return visBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .messages.VBall vis = 1;</code>
     */
    public Builder setVis(messages.VBall value) {
      if (visBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        vis_ = value;
        onChanged();
      } else {
        visBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>optional .messages.VBall vis = 1;</code>
     */
    public Builder setVis(
        messages.VBall.Builder builderForValue) {
      if (visBuilder_ == null) {
        vis_ = builderForValue.build();
        onChanged();
      } else {
        visBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>optional .messages.VBall vis = 1;</code>
     */
    public Builder mergeVis(messages.VBall value) {
      if (visBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            vis_ != messages.VBall.getDefaultInstance()) {
          vis_ =
            messages.VBall.newBuilder(vis_).mergeFrom(value).buildPartial();
        } else {
          vis_ = value;
        }
        onChanged();
      } else {
        visBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <code>optional .messages.VBall vis = 1;</code>
     */
    public Builder clearVis() {
      if (visBuilder_ == null) {
        vis_ = messages.VBall.getDefaultInstance();
        onChanged();
      } else {
        visBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }
    /**
     * <code>optional .messages.VBall vis = 1;</code>
     */
    public messages.VBall.Builder getVisBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getVisFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .messages.VBall vis = 1;</code>
     */
    public messages.VBallOrBuilder getVisOrBuilder() {
      if (visBuilder_ != null) {
        return visBuilder_.getMessageOrBuilder();
      } else {
        return vis_;
      }
    }
    /**
     * <code>optional .messages.VBall vis = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        messages.VBall, messages.VBall.Builder, messages.VBallOrBuilder> 
        getVisFieldBuilder() {
      if (visBuilder_ == null) {
        visBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            messages.VBall, messages.VBall.Builder, messages.VBallOrBuilder>(
                getVis(),
                getParentForChildren(),
                isClean());
        vis_ = null;
      }
      return visBuilder_;
    }

    private float distance_ ;
    /**
     * <code>optional float distance = 2;</code>
     */
    public boolean hasDistance() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float distance = 2;</code>
     */
    public float getDistance() {
      return distance_;
    }
    /**
     * <code>optional float distance = 2;</code>
     */
    public Builder setDistance(float value) {
      bitField0_ |= 0x00000002;
      distance_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float distance = 2;</code>
     */
    public Builder clearDistance() {
      bitField0_ = (bitField0_ & ~0x00000002);
      distance_ = 0F;
      onChanged();
      return this;
    }

    private float bearing_ ;
    /**
     * <code>optional float bearing = 3;</code>
     */
    public boolean hasBearing() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float bearing = 3;</code>
     */
    public float getBearing() {
      return bearing_;
    }
    /**
     * <code>optional float bearing = 3;</code>
     */
    public Builder setBearing(float value) {
      bitField0_ |= 0x00000004;
      bearing_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float bearing = 3;</code>
     */
    public Builder clearBearing() {
      bitField0_ = (bitField0_ & ~0x00000004);
      bearing_ = 0F;
      onChanged();
      return this;
    }

    private float relX_ ;
    /**
     * <code>optional float rel_x = 4;</code>
     *
     * <pre>
     * State of best filter
     * </pre>
     */
    public boolean hasRelX() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float rel_x = 4;</code>
     *
     * <pre>
     * State of best filter
     * </pre>
     */
    public float getRelX() {
      return relX_;
    }
    /**
     * <code>optional float rel_x = 4;</code>
     *
     * <pre>
     * State of best filter
     * </pre>
     */
    public Builder setRelX(float value) {
      bitField0_ |= 0x00000008;
      relX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float rel_x = 4;</code>
     *
     * <pre>
     * State of best filter
     * </pre>
     */
    public Builder clearRelX() {
      bitField0_ = (bitField0_ & ~0x00000008);
      relX_ = 0F;
      onChanged();
      return this;
    }

    private float relY_ ;
    /**
     * <code>optional float rel_y = 5;</code>
     */
    public boolean hasRelY() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float rel_y = 5;</code>
     */
    public float getRelY() {
      return relY_;
    }
    /**
     * <code>optional float rel_y = 5;</code>
     */
    public Builder setRelY(float value) {
      bitField0_ |= 0x00000010;
      relY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float rel_y = 5;</code>
     */
    public Builder clearRelY() {
      bitField0_ = (bitField0_ & ~0x00000010);
      relY_ = 0F;
      onChanged();
      return this;
    }

    private float velX_ ;
    /**
     * <code>optional float vel_x = 6;</code>
     */
    public boolean hasVelX() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float vel_x = 6;</code>
     */
    public float getVelX() {
      return velX_;
    }
    /**
     * <code>optional float vel_x = 6;</code>
     */
    public Builder setVelX(float value) {
      bitField0_ |= 0x00000020;
      velX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float vel_x = 6;</code>
     */
    public Builder clearVelX() {
      bitField0_ = (bitField0_ & ~0x00000020);
      velX_ = 0F;
      onChanged();
      return this;
    }

    private float velY_ ;
    /**
     * <code>optional float vel_y = 7;</code>
     */
    public boolean hasVelY() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float vel_y = 7;</code>
     */
    public float getVelY() {
      return velY_;
    }
    /**
     * <code>optional float vel_y = 7;</code>
     */
    public Builder setVelY(float value) {
      bitField0_ |= 0x00000040;
      velY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float vel_y = 7;</code>
     */
    public Builder clearVelY() {
      bitField0_ = (bitField0_ & ~0x00000040);
      velY_ = 0F;
      onChanged();
      return this;
    }

    private float varRelX_ ;
    /**
     * <code>optional float var_rel_x = 8;</code>
     */
    public boolean hasVarRelX() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float var_rel_x = 8;</code>
     */
    public float getVarRelX() {
      return varRelX_;
    }
    /**
     * <code>optional float var_rel_x = 8;</code>
     */
    public Builder setVarRelX(float value) {
      bitField0_ |= 0x00000080;
      varRelX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float var_rel_x = 8;</code>
     */
    public Builder clearVarRelX() {
      bitField0_ = (bitField0_ & ~0x00000080);
      varRelX_ = 0F;
      onChanged();
      return this;
    }

    private float varRelY_ ;
    /**
     * <code>optional float var_rel_y = 9;</code>
     */
    public boolean hasVarRelY() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float var_rel_y = 9;</code>
     */
    public float getVarRelY() {
      return varRelY_;
    }
    /**
     * <code>optional float var_rel_y = 9;</code>
     */
    public Builder setVarRelY(float value) {
      bitField0_ |= 0x00000100;
      varRelY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float var_rel_y = 9;</code>
     */
    public Builder clearVarRelY() {
      bitField0_ = (bitField0_ & ~0x00000100);
      varRelY_ = 0F;
      onChanged();
      return this;
    }

    private float varVelX_ ;
    /**
     * <code>optional float var_vel_x = 10;</code>
     */
    public boolean hasVarVelX() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float var_vel_x = 10;</code>
     */
    public float getVarVelX() {
      return varVelX_;
    }
    /**
     * <code>optional float var_vel_x = 10;</code>
     */
    public Builder setVarVelX(float value) {
      bitField0_ |= 0x00000200;
      varVelX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float var_vel_x = 10;</code>
     */
    public Builder clearVarVelX() {
      bitField0_ = (bitField0_ & ~0x00000200);
      varVelX_ = 0F;
      onChanged();
      return this;
    }

    private float varVelY_ ;
    /**
     * <code>optional float var_vel_y = 11;</code>
     */
    public boolean hasVarVelY() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float var_vel_y = 11;</code>
     */
    public float getVarVelY() {
      return varVelY_;
    }
    /**
     * <code>optional float var_vel_y = 11;</code>
     */
    public Builder setVarVelY(float value) {
      bitField0_ |= 0x00000400;
      varVelY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float var_vel_y = 11;</code>
     */
    public Builder clearVarVelY() {
      bitField0_ = (bitField0_ & ~0x00000400);
      varVelY_ = 0F;
      onChanged();
      return this;
    }

    private boolean isStationary_ ;
    /**
     * <code>optional bool is_stationary = 12;</code>
     */
    public boolean hasIsStationary() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool is_stationary = 12;</code>
     */
    public boolean getIsStationary() {
      return isStationary_;
    }
    /**
     * <code>optional bool is_stationary = 12;</code>
     */
    public Builder setIsStationary(boolean value) {
      bitField0_ |= 0x00000800;
      isStationary_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool is_stationary = 12;</code>
     */
    public Builder clearIsStationary() {
      bitField0_ = (bitField0_ & ~0x00000800);
      isStationary_ = false;
      onChanged();
      return this;
    }

    private float bearingDeg_ ;
    /**
     * <code>optional float bearing_deg = 13;</code>
     */
    public boolean hasBearingDeg() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float bearing_deg = 13;</code>
     */
    public float getBearingDeg() {
      return bearingDeg_;
    }
    /**
     * <code>optional float bearing_deg = 13;</code>
     */
    public Builder setBearingDeg(float value) {
      bitField0_ |= 0x00001000;
      bearingDeg_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float bearing_deg = 13;</code>
     */
    public Builder clearBearingDeg() {
      bitField0_ = (bitField0_ & ~0x00001000);
      bearingDeg_ = 0F;
      onChanged();
      return this;
    }

    private float x_ ;
    /**
     * <code>optional float x = 14;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float x = 14;</code>
     */
    public float getX() {
      return x_;
    }
    /**
     * <code>optional float x = 14;</code>
     */
    public Builder setX(float value) {
      bitField0_ |= 0x00002000;
      x_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float x = 14;</code>
     */
    public Builder clearX() {
      bitField0_ = (bitField0_ & ~0x00002000);
      x_ = 0F;
      onChanged();
      return this;
    }

    private float y_ ;
    /**
     * <code>optional float y = 15;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float y = 15;</code>
     */
    public float getY() {
      return y_;
    }
    /**
     * <code>optional float y = 15;</code>
     */
    public Builder setY(float value) {
      bitField0_ |= 0x00004000;
      y_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float y = 15;</code>
     */
    public Builder clearY() {
      bitField0_ = (bitField0_ & ~0x00004000);
      y_ = 0F;
      onChanged();
      return this;
    }

    private float relXDest_ ;
    /**
     * <code>optional float rel_x_dest = 16;</code>
     */
    public boolean hasRelXDest() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float rel_x_dest = 16;</code>
     */
    public float getRelXDest() {
      return relXDest_;
    }
    /**
     * <code>optional float rel_x_dest = 16;</code>
     */
    public Builder setRelXDest(float value) {
      bitField0_ |= 0x00008000;
      relXDest_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float rel_x_dest = 16;</code>
     */
    public Builder clearRelXDest() {
      bitField0_ = (bitField0_ & ~0x00008000);
      relXDest_ = 0F;
      onChanged();
      return this;
    }

    private float relYDest_ ;
    /**
     * <code>optional float rel_y_dest = 17;</code>
     */
    public boolean hasRelYDest() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float rel_y_dest = 17;</code>
     */
    public float getRelYDest() {
      return relYDest_;
    }
    /**
     * <code>optional float rel_y_dest = 17;</code>
     */
    public Builder setRelYDest(float value) {
      bitField0_ |= 0x00010000;
      relYDest_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float rel_y_dest = 17;</code>
     */
    public Builder clearRelYDest() {
      bitField0_ = (bitField0_ & ~0x00010000);
      relYDest_ = 0F;
      onChanged();
      return this;
    }

    private float speed_ ;
    /**
     * <code>optional float speed = 18;</code>
     *
     * <pre>
     * For Goalie, know where the ball is going to intersect y-axis
     * </pre>
     */
    public boolean hasSpeed() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float speed = 18;</code>
     *
     * <pre>
     * For Goalie, know where the ball is going to intersect y-axis
     * </pre>
     */
    public float getSpeed() {
      return speed_;
    }
    /**
     * <code>optional float speed = 18;</code>
     *
     * <pre>
     * For Goalie, know where the ball is going to intersect y-axis
     * </pre>
     */
    public Builder setSpeed(float value) {
      bitField0_ |= 0x00020000;
      speed_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float speed = 18;</code>
     *
     * <pre>
     * For Goalie, know where the ball is going to intersect y-axis
     * </pre>
     */
    public Builder clearSpeed() {
      bitField0_ = (bitField0_ & ~0x00020000);
      speed_ = 0F;
      onChanged();
      return this;
    }

    private float relYIntersectDest_ ;
    /**
     * <code>optional float rel_y_intersect_dest = 19;</code>
     */
    public boolean hasRelYIntersectDest() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional float rel_y_intersect_dest = 19;</code>
     */
    public float getRelYIntersectDest() {
      return relYIntersectDest_;
    }
    /**
     * <code>optional float rel_y_intersect_dest = 19;</code>
     */
    public Builder setRelYIntersectDest(float value) {
      bitField0_ |= 0x00040000;
      relYIntersectDest_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float rel_y_intersect_dest = 19;</code>
     */
    public Builder clearRelYIntersectDest() {
      bitField0_ = (bitField0_ & ~0x00040000);
      relYIntersectDest_ = 0F;
      onChanged();
      return this;
    }

    private float statRelX_ ;
    /**
     * <code>optional float stat_rel_x = 20;</code>
     */
    public boolean hasStatRelX() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional float stat_rel_x = 20;</code>
     */
    public float getStatRelX() {
      return statRelX_;
    }
    /**
     * <code>optional float stat_rel_x = 20;</code>
     */
    public Builder setStatRelX(float value) {
      bitField0_ |= 0x00080000;
      statRelX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float stat_rel_x = 20;</code>
     */
    public Builder clearStatRelX() {
      bitField0_ = (bitField0_ & ~0x00080000);
      statRelX_ = 0F;
      onChanged();
      return this;
    }

    private float statRelY_ ;
    /**
     * <code>optional float stat_rel_y = 21;</code>
     */
    public boolean hasStatRelY() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional float stat_rel_y = 21;</code>
     */
    public float getStatRelY() {
      return statRelY_;
    }
    /**
     * <code>optional float stat_rel_y = 21;</code>
     */
    public Builder setStatRelY(float value) {
      bitField0_ |= 0x00100000;
      statRelY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float stat_rel_y = 21;</code>
     */
    public Builder clearStatRelY() {
      bitField0_ = (bitField0_ & ~0x00100000);
      statRelY_ = 0F;
      onChanged();
      return this;
    }

    private float statDistance_ ;
    /**
     * <code>optional float stat_distance = 22;</code>
     */
    public boolean hasStatDistance() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional float stat_distance = 22;</code>
     */
    public float getStatDistance() {
      return statDistance_;
    }
    /**
     * <code>optional float stat_distance = 22;</code>
     */
    public Builder setStatDistance(float value) {
      bitField0_ |= 0x00200000;
      statDistance_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float stat_distance = 22;</code>
     */
    public Builder clearStatDistance() {
      bitField0_ = (bitField0_ & ~0x00200000);
      statDistance_ = 0F;
      onChanged();
      return this;
    }

    private float statBearing_ ;
    /**
     * <code>optional float stat_bearing = 23;</code>
     */
    public boolean hasStatBearing() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional float stat_bearing = 23;</code>
     */
    public float getStatBearing() {
      return statBearing_;
    }
    /**
     * <code>optional float stat_bearing = 23;</code>
     */
    public Builder setStatBearing(float value) {
      bitField0_ |= 0x00400000;
      statBearing_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float stat_bearing = 23;</code>
     */
    public Builder clearStatBearing() {
      bitField0_ = (bitField0_ & ~0x00400000);
      statBearing_ = 0F;
      onChanged();
      return this;
    }

    private float movRelX_ ;
    /**
     * <code>optional float mov_rel_x = 24;</code>
     */
    public boolean hasMovRelX() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional float mov_rel_x = 24;</code>
     */
    public float getMovRelX() {
      return movRelX_;
    }
    /**
     * <code>optional float mov_rel_x = 24;</code>
     */
    public Builder setMovRelX(float value) {
      bitField0_ |= 0x00800000;
      movRelX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float mov_rel_x = 24;</code>
     */
    public Builder clearMovRelX() {
      bitField0_ = (bitField0_ & ~0x00800000);
      movRelX_ = 0F;
      onChanged();
      return this;
    }

    private float movRelY_ ;
    /**
     * <code>optional float mov_rel_y = 25;</code>
     */
    public boolean hasMovRelY() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional float mov_rel_y = 25;</code>
     */
    public float getMovRelY() {
      return movRelY_;
    }
    /**
     * <code>optional float mov_rel_y = 25;</code>
     */
    public Builder setMovRelY(float value) {
      bitField0_ |= 0x01000000;
      movRelY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float mov_rel_y = 25;</code>
     */
    public Builder clearMovRelY() {
      bitField0_ = (bitField0_ & ~0x01000000);
      movRelY_ = 0F;
      onChanged();
      return this;
    }

    private float movDistance_ ;
    /**
     * <code>optional float mov_distance = 26;</code>
     */
    public boolean hasMovDistance() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional float mov_distance = 26;</code>
     */
    public float getMovDistance() {
      return movDistance_;
    }
    /**
     * <code>optional float mov_distance = 26;</code>
     */
    public Builder setMovDistance(float value) {
      bitField0_ |= 0x02000000;
      movDistance_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float mov_distance = 26;</code>
     */
    public Builder clearMovDistance() {
      bitField0_ = (bitField0_ & ~0x02000000);
      movDistance_ = 0F;
      onChanged();
      return this;
    }

    private float movBearing_ ;
    /**
     * <code>optional float mov_bearing = 27;</code>
     */
    public boolean hasMovBearing() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional float mov_bearing = 27;</code>
     */
    public float getMovBearing() {
      return movBearing_;
    }
    /**
     * <code>optional float mov_bearing = 27;</code>
     */
    public Builder setMovBearing(float value) {
      bitField0_ |= 0x04000000;
      movBearing_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float mov_bearing = 27;</code>
     */
    public Builder clearMovBearing() {
      bitField0_ = (bitField0_ & ~0x04000000);
      movBearing_ = 0F;
      onChanged();
      return this;
    }

    private float movVelX_ ;
    /**
     * <code>optional float mov_vel_x = 28;</code>
     */
    public boolean hasMovVelX() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional float mov_vel_x = 28;</code>
     */
    public float getMovVelX() {
      return movVelX_;
    }
    /**
     * <code>optional float mov_vel_x = 28;</code>
     */
    public Builder setMovVelX(float value) {
      bitField0_ |= 0x08000000;
      movVelX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float mov_vel_x = 28;</code>
     */
    public Builder clearMovVelX() {
      bitField0_ = (bitField0_ & ~0x08000000);
      movVelX_ = 0F;
      onChanged();
      return this;
    }

    private float movVelY_ ;
    /**
     * <code>optional float mov_vel_y = 29;</code>
     */
    public boolean hasMovVelY() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional float mov_vel_y = 29;</code>
     */
    public float getMovVelY() {
      return movVelY_;
    }
    /**
     * <code>optional float mov_vel_y = 29;</code>
     */
    public Builder setMovVelY(float value) {
      bitField0_ |= 0x10000000;
      movVelY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float mov_vel_y = 29;</code>
     */
    public Builder clearMovVelY() {
      bitField0_ = (bitField0_ & ~0x10000000);
      movVelY_ = 0F;
      onChanged();
      return this;
    }

    private float movSpeed_ ;
    /**
     * <code>optional float mov_speed = 30;</code>
     */
    public boolean hasMovSpeed() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional float mov_speed = 30;</code>
     */
    public float getMovSpeed() {
      return movSpeed_;
    }
    /**
     * <code>optional float mov_speed = 30;</code>
     */
    public Builder setMovSpeed(float value) {
      bitField0_ |= 0x20000000;
      movSpeed_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float mov_speed = 30;</code>
     */
    public Builder clearMovSpeed() {
      bitField0_ = (bitField0_ & ~0x20000000);
      movSpeed_ = 0F;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:messages.FilteredBall)
  }

  static {
    defaultInstance = new FilteredBall(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:messages.FilteredBall)
}

