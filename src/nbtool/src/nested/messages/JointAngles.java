// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PMotion.proto

package messages;

/**
 * Protobuf type {@code messages.JointAngles}
 */
public final class JointAngles extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:messages.JointAngles)
    JointAnglesOrBuilder {
  // Use JointAngles.newBuilder() to construct.
  private JointAngles(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private JointAngles(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final JointAngles defaultInstance;
  public static JointAngles getDefaultInstance() {
    return defaultInstance;
  }

  public JointAngles getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final com.google.protobuf.UnknownFieldSet unknownFields;
  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private JointAngles(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 13: {
            bitField0_ |= 0x00000001;
            headYaw_ = input.readFloat();
            break;
          }
          case 21: {
            bitField0_ |= 0x00000002;
            headPitch_ = input.readFloat();
            break;
          }
          case 29: {
            bitField0_ |= 0x00000004;
            lShoulderPitch_ = input.readFloat();
            break;
          }
          case 37: {
            bitField0_ |= 0x00000008;
            lShoulderRoll_ = input.readFloat();
            break;
          }
          case 45: {
            bitField0_ |= 0x00000010;
            lElbowYaw_ = input.readFloat();
            break;
          }
          case 53: {
            bitField0_ |= 0x00000020;
            lElbowRoll_ = input.readFloat();
            break;
          }
          case 61: {
            bitField0_ |= 0x00000040;
            lWristYaw_ = input.readFloat();
            break;
          }
          case 69: {
            bitField0_ |= 0x00000080;
            lHand_ = input.readFloat();
            break;
          }
          case 77: {
            bitField0_ |= 0x00000100;
            rShoulderPitch_ = input.readFloat();
            break;
          }
          case 85: {
            bitField0_ |= 0x00000200;
            rShoulderRoll_ = input.readFloat();
            break;
          }
          case 93: {
            bitField0_ |= 0x00000400;
            rElbowYaw_ = input.readFloat();
            break;
          }
          case 101: {
            bitField0_ |= 0x00000800;
            rElbowRoll_ = input.readFloat();
            break;
          }
          case 109: {
            bitField0_ |= 0x00001000;
            rWristYaw_ = input.readFloat();
            break;
          }
          case 117: {
            bitField0_ |= 0x00002000;
            rHand_ = input.readFloat();
            break;
          }
          case 125: {
            bitField0_ |= 0x00004000;
            lHipYawPitch_ = input.readFloat();
            break;
          }
          case 133: {
            bitField0_ |= 0x00008000;
            rHipYawPitch_ = input.readFloat();
            break;
          }
          case 141: {
            bitField0_ |= 0x00010000;
            lHipRoll_ = input.readFloat();
            break;
          }
          case 149: {
            bitField0_ |= 0x00020000;
            lHipPitch_ = input.readFloat();
            break;
          }
          case 157: {
            bitField0_ |= 0x00040000;
            lKneePitch_ = input.readFloat();
            break;
          }
          case 165: {
            bitField0_ |= 0x00080000;
            lAnklePitch_ = input.readFloat();
            break;
          }
          case 173: {
            bitField0_ |= 0x00100000;
            lAnkleRoll_ = input.readFloat();
            break;
          }
          case 181: {
            bitField0_ |= 0x00200000;
            rHipRoll_ = input.readFloat();
            break;
          }
          case 189: {
            bitField0_ |= 0x00400000;
            rHipPitch_ = input.readFloat();
            break;
          }
          case 197: {
            bitField0_ |= 0x00800000;
            rKneePitch_ = input.readFloat();
            break;
          }
          case 205: {
            bitField0_ |= 0x01000000;
            rAnklePitch_ = input.readFloat();
            break;
          }
          case 213: {
            bitField0_ |= 0x02000000;
            rAnkleRoll_ = input.readFloat();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return messages._File_PMotion.internal_static_messages_JointAngles_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return messages._File_PMotion.internal_static_messages_JointAngles_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            messages.JointAngles.class, messages.JointAngles.Builder.class);
  }

  public static com.google.protobuf.Parser<JointAngles> PARSER =
      new com.google.protobuf.AbstractParser<JointAngles>() {
    public JointAngles parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new JointAngles(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<JointAngles> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int HEAD_YAW_FIELD_NUMBER = 1;
  private float headYaw_;
  /**
   * <code>optional float head_yaw = 1;</code>
   *
   * <pre>
   * Head angles.
   * </pre>
   */
  public boolean hasHeadYaw() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional float head_yaw = 1;</code>
   *
   * <pre>
   * Head angles.
   * </pre>
   */
  public float getHeadYaw() {
    return headYaw_;
  }

  public static final int HEAD_PITCH_FIELD_NUMBER = 2;
  private float headPitch_;
  /**
   * <code>optional float head_pitch = 2;</code>
   */
  public boolean hasHeadPitch() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional float head_pitch = 2;</code>
   */
  public float getHeadPitch() {
    return headPitch_;
  }

  public static final int L_SHOULDER_PITCH_FIELD_NUMBER = 3;
  private float lShoulderPitch_;
  /**
   * <code>optional float l_shoulder_pitch = 3;</code>
   *
   * <pre>
   * Left arm angles.
   * </pre>
   */
  public boolean hasLShoulderPitch() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional float l_shoulder_pitch = 3;</code>
   *
   * <pre>
   * Left arm angles.
   * </pre>
   */
  public float getLShoulderPitch() {
    return lShoulderPitch_;
  }

  public static final int L_SHOULDER_ROLL_FIELD_NUMBER = 4;
  private float lShoulderRoll_;
  /**
   * <code>optional float l_shoulder_roll = 4;</code>
   */
  public boolean hasLShoulderRoll() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional float l_shoulder_roll = 4;</code>
   */
  public float getLShoulderRoll() {
    return lShoulderRoll_;
  }

  public static final int L_ELBOW_YAW_FIELD_NUMBER = 5;
  private float lElbowYaw_;
  /**
   * <code>optional float l_elbow_yaw = 5;</code>
   */
  public boolean hasLElbowYaw() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional float l_elbow_yaw = 5;</code>
   */
  public float getLElbowYaw() {
    return lElbowYaw_;
  }

  public static final int L_ELBOW_ROLL_FIELD_NUMBER = 6;
  private float lElbowRoll_;
  /**
   * <code>optional float l_elbow_roll = 6;</code>
   */
  public boolean hasLElbowRoll() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>optional float l_elbow_roll = 6;</code>
   */
  public float getLElbowRoll() {
    return lElbowRoll_;
  }

  public static final int L_WRIST_YAW_FIELD_NUMBER = 7;
  private float lWristYaw_;
  /**
   * <code>optional float l_wrist_yaw = 7;</code>
   */
  public boolean hasLWristYaw() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <code>optional float l_wrist_yaw = 7;</code>
   */
  public float getLWristYaw() {
    return lWristYaw_;
  }

  public static final int L_HAND_FIELD_NUMBER = 8;
  private float lHand_;
  /**
   * <code>optional float l_hand = 8;</code>
   */
  public boolean hasLHand() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional float l_hand = 8;</code>
   */
  public float getLHand() {
    return lHand_;
  }

  public static final int R_SHOULDER_PITCH_FIELD_NUMBER = 9;
  private float rShoulderPitch_;
  /**
   * <code>optional float r_shoulder_pitch = 9;</code>
   *
   * <pre>
   * Right arm angles.
   * </pre>
   */
  public boolean hasRShoulderPitch() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <code>optional float r_shoulder_pitch = 9;</code>
   *
   * <pre>
   * Right arm angles.
   * </pre>
   */
  public float getRShoulderPitch() {
    return rShoulderPitch_;
  }

  public static final int R_SHOULDER_ROLL_FIELD_NUMBER = 10;
  private float rShoulderRoll_;
  /**
   * <code>optional float r_shoulder_roll = 10;</code>
   */
  public boolean hasRShoulderRoll() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <code>optional float r_shoulder_roll = 10;</code>
   */
  public float getRShoulderRoll() {
    return rShoulderRoll_;
  }

  public static final int R_ELBOW_YAW_FIELD_NUMBER = 11;
  private float rElbowYaw_;
  /**
   * <code>optional float r_elbow_yaw = 11;</code>
   */
  public boolean hasRElbowYaw() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <code>optional float r_elbow_yaw = 11;</code>
   */
  public float getRElbowYaw() {
    return rElbowYaw_;
  }

  public static final int R_ELBOW_ROLL_FIELD_NUMBER = 12;
  private float rElbowRoll_;
  /**
   * <code>optional float r_elbow_roll = 12;</code>
   */
  public boolean hasRElbowRoll() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <code>optional float r_elbow_roll = 12;</code>
   */
  public float getRElbowRoll() {
    return rElbowRoll_;
  }

  public static final int R_WRIST_YAW_FIELD_NUMBER = 13;
  private float rWristYaw_;
  /**
   * <code>optional float r_wrist_yaw = 13;</code>
   */
  public boolean hasRWristYaw() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <code>optional float r_wrist_yaw = 13;</code>
   */
  public float getRWristYaw() {
    return rWristYaw_;
  }

  public static final int R_HAND_FIELD_NUMBER = 14;
  private float rHand_;
  /**
   * <code>optional float r_hand = 14;</code>
   */
  public boolean hasRHand() {
    return ((bitField0_ & 0x00002000) == 0x00002000);
  }
  /**
   * <code>optional float r_hand = 14;</code>
   */
  public float getRHand() {
    return rHand_;
  }

  public static final int L_HIP_YAW_PITCH_FIELD_NUMBER = 15;
  private float lHipYawPitch_;
  /**
   * <code>optional float l_hip_yaw_pitch = 15;</code>
   *
   * <pre>
   * Pelvis angles.
   * </pre>
   */
  public boolean hasLHipYawPitch() {
    return ((bitField0_ & 0x00004000) == 0x00004000);
  }
  /**
   * <code>optional float l_hip_yaw_pitch = 15;</code>
   *
   * <pre>
   * Pelvis angles.
   * </pre>
   */
  public float getLHipYawPitch() {
    return lHipYawPitch_;
  }

  public static final int R_HIP_YAW_PITCH_FIELD_NUMBER = 16;
  private float rHipYawPitch_;
  /**
   * <code>optional float r_hip_yaw_pitch = 16;</code>
   */
  public boolean hasRHipYawPitch() {
    return ((bitField0_ & 0x00008000) == 0x00008000);
  }
  /**
   * <code>optional float r_hip_yaw_pitch = 16;</code>
   */
  public float getRHipYawPitch() {
    return rHipYawPitch_;
  }

  public static final int L_HIP_ROLL_FIELD_NUMBER = 17;
  private float lHipRoll_;
  /**
   * <code>optional float l_hip_roll = 17;</code>
   *
   * <pre>
   * Left leg angles.
   * </pre>
   */
  public boolean hasLHipRoll() {
    return ((bitField0_ & 0x00010000) == 0x00010000);
  }
  /**
   * <code>optional float l_hip_roll = 17;</code>
   *
   * <pre>
   * Left leg angles.
   * </pre>
   */
  public float getLHipRoll() {
    return lHipRoll_;
  }

  public static final int L_HIP_PITCH_FIELD_NUMBER = 18;
  private float lHipPitch_;
  /**
   * <code>optional float l_hip_pitch = 18;</code>
   */
  public boolean hasLHipPitch() {
    return ((bitField0_ & 0x00020000) == 0x00020000);
  }
  /**
   * <code>optional float l_hip_pitch = 18;</code>
   */
  public float getLHipPitch() {
    return lHipPitch_;
  }

  public static final int L_KNEE_PITCH_FIELD_NUMBER = 19;
  private float lKneePitch_;
  /**
   * <code>optional float l_knee_pitch = 19;</code>
   */
  public boolean hasLKneePitch() {
    return ((bitField0_ & 0x00040000) == 0x00040000);
  }
  /**
   * <code>optional float l_knee_pitch = 19;</code>
   */
  public float getLKneePitch() {
    return lKneePitch_;
  }

  public static final int L_ANKLE_PITCH_FIELD_NUMBER = 20;
  private float lAnklePitch_;
  /**
   * <code>optional float l_ankle_pitch = 20;</code>
   */
  public boolean hasLAnklePitch() {
    return ((bitField0_ & 0x00080000) == 0x00080000);
  }
  /**
   * <code>optional float l_ankle_pitch = 20;</code>
   */
  public float getLAnklePitch() {
    return lAnklePitch_;
  }

  public static final int L_ANKLE_ROLL_FIELD_NUMBER = 21;
  private float lAnkleRoll_;
  /**
   * <code>optional float l_ankle_roll = 21;</code>
   */
  public boolean hasLAnkleRoll() {
    return ((bitField0_ & 0x00100000) == 0x00100000);
  }
  /**
   * <code>optional float l_ankle_roll = 21;</code>
   */
  public float getLAnkleRoll() {
    return lAnkleRoll_;
  }

  public static final int R_HIP_ROLL_FIELD_NUMBER = 22;
  private float rHipRoll_;
  /**
   * <code>optional float r_hip_roll = 22;</code>
   *
   * <pre>
   * Right leg angles.
   * </pre>
   */
  public boolean hasRHipRoll() {
    return ((bitField0_ & 0x00200000) == 0x00200000);
  }
  /**
   * <code>optional float r_hip_roll = 22;</code>
   *
   * <pre>
   * Right leg angles.
   * </pre>
   */
  public float getRHipRoll() {
    return rHipRoll_;
  }

  public static final int R_HIP_PITCH_FIELD_NUMBER = 23;
  private float rHipPitch_;
  /**
   * <code>optional float r_hip_pitch = 23;</code>
   */
  public boolean hasRHipPitch() {
    return ((bitField0_ & 0x00400000) == 0x00400000);
  }
  /**
   * <code>optional float r_hip_pitch = 23;</code>
   */
  public float getRHipPitch() {
    return rHipPitch_;
  }

  public static final int R_KNEE_PITCH_FIELD_NUMBER = 24;
  private float rKneePitch_;
  /**
   * <code>optional float r_knee_pitch = 24;</code>
   */
  public boolean hasRKneePitch() {
    return ((bitField0_ & 0x00800000) == 0x00800000);
  }
  /**
   * <code>optional float r_knee_pitch = 24;</code>
   */
  public float getRKneePitch() {
    return rKneePitch_;
  }

  public static final int R_ANKLE_PITCH_FIELD_NUMBER = 25;
  private float rAnklePitch_;
  /**
   * <code>optional float r_ankle_pitch = 25;</code>
   */
  public boolean hasRAnklePitch() {
    return ((bitField0_ & 0x01000000) == 0x01000000);
  }
  /**
   * <code>optional float r_ankle_pitch = 25;</code>
   */
  public float getRAnklePitch() {
    return rAnklePitch_;
  }

  public static final int R_ANKLE_ROLL_FIELD_NUMBER = 26;
  private float rAnkleRoll_;
  /**
   * <code>optional float r_ankle_roll = 26;</code>
   */
  public boolean hasRAnkleRoll() {
    return ((bitField0_ & 0x02000000) == 0x02000000);
  }
  /**
   * <code>optional float r_ankle_roll = 26;</code>
   */
  public float getRAnkleRoll() {
    return rAnkleRoll_;
  }

  private void initFields() {
    headYaw_ = 0F;
    headPitch_ = 0F;
    lShoulderPitch_ = 0F;
    lShoulderRoll_ = 0F;
    lElbowYaw_ = 0F;
    lElbowRoll_ = 0F;
    lWristYaw_ = 0F;
    lHand_ = 0F;
    rShoulderPitch_ = 0F;
    rShoulderRoll_ = 0F;
    rElbowYaw_ = 0F;
    rElbowRoll_ = 0F;
    rWristYaw_ = 0F;
    rHand_ = 0F;
    lHipYawPitch_ = 0F;
    rHipYawPitch_ = 0F;
    lHipRoll_ = 0F;
    lHipPitch_ = 0F;
    lKneePitch_ = 0F;
    lAnklePitch_ = 0F;
    lAnkleRoll_ = 0F;
    rHipRoll_ = 0F;
    rHipPitch_ = 0F;
    rKneePitch_ = 0F;
    rAnklePitch_ = 0F;
    rAnkleRoll_ = 0F;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeFloat(1, headYaw_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeFloat(2, headPitch_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeFloat(3, lShoulderPitch_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeFloat(4, lShoulderRoll_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeFloat(5, lElbowYaw_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeFloat(6, lElbowRoll_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeFloat(7, lWristYaw_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeFloat(8, lHand_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeFloat(9, rShoulderPitch_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeFloat(10, rShoulderRoll_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeFloat(11, rElbowYaw_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeFloat(12, rElbowRoll_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeFloat(13, rWristYaw_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      output.writeFloat(14, rHand_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      output.writeFloat(15, lHipYawPitch_);
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      output.writeFloat(16, rHipYawPitch_);
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      output.writeFloat(17, lHipRoll_);
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      output.writeFloat(18, lHipPitch_);
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      output.writeFloat(19, lKneePitch_);
    }
    if (((bitField0_ & 0x00080000) == 0x00080000)) {
      output.writeFloat(20, lAnklePitch_);
    }
    if (((bitField0_ & 0x00100000) == 0x00100000)) {
      output.writeFloat(21, lAnkleRoll_);
    }
    if (((bitField0_ & 0x00200000) == 0x00200000)) {
      output.writeFloat(22, rHipRoll_);
    }
    if (((bitField0_ & 0x00400000) == 0x00400000)) {
      output.writeFloat(23, rHipPitch_);
    }
    if (((bitField0_ & 0x00800000) == 0x00800000)) {
      output.writeFloat(24, rKneePitch_);
    }
    if (((bitField0_ & 0x01000000) == 0x01000000)) {
      output.writeFloat(25, rAnklePitch_);
    }
    if (((bitField0_ & 0x02000000) == 0x02000000)) {
      output.writeFloat(26, rAnkleRoll_);
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(1, headYaw_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(2, headPitch_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(3, lShoulderPitch_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(4, lShoulderRoll_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(5, lElbowYaw_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(6, lElbowRoll_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(7, lWristYaw_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(8, lHand_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(9, rShoulderPitch_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(10, rShoulderRoll_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(11, rElbowYaw_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(12, rElbowRoll_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(13, rWristYaw_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(14, rHand_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(15, lHipYawPitch_);
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(16, rHipYawPitch_);
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(17, lHipRoll_);
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(18, lHipPitch_);
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(19, lKneePitch_);
    }
    if (((bitField0_ & 0x00080000) == 0x00080000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(20, lAnklePitch_);
    }
    if (((bitField0_ & 0x00100000) == 0x00100000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(21, lAnkleRoll_);
    }
    if (((bitField0_ & 0x00200000) == 0x00200000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(22, rHipRoll_);
    }
    if (((bitField0_ & 0x00400000) == 0x00400000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(23, rHipPitch_);
    }
    if (((bitField0_ & 0x00800000) == 0x00800000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(24, rKneePitch_);
    }
    if (((bitField0_ & 0x01000000) == 0x01000000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(25, rAnklePitch_);
    }
    if (((bitField0_ & 0x02000000) == 0x02000000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(26, rAnkleRoll_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static messages.JointAngles parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static messages.JointAngles parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static messages.JointAngles parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static messages.JointAngles parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static messages.JointAngles parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static messages.JointAngles parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static messages.JointAngles parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static messages.JointAngles parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static messages.JointAngles parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static messages.JointAngles parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(messages.JointAngles prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code messages.JointAngles}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:messages.JointAngles)
      messages.JointAnglesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return messages._File_PMotion.internal_static_messages_JointAngles_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return messages._File_PMotion.internal_static_messages_JointAngles_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              messages.JointAngles.class, messages.JointAngles.Builder.class);
    }

    // Construct using messages.JointAngles.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      headYaw_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000001);
      headPitch_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000002);
      lShoulderPitch_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000004);
      lShoulderRoll_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000008);
      lElbowYaw_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000010);
      lElbowRoll_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000020);
      lWristYaw_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000040);
      lHand_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000080);
      rShoulderPitch_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000100);
      rShoulderRoll_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000200);
      rElbowYaw_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000400);
      rElbowRoll_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000800);
      rWristYaw_ = 0F;
      bitField0_ = (bitField0_ & ~0x00001000);
      rHand_ = 0F;
      bitField0_ = (bitField0_ & ~0x00002000);
      lHipYawPitch_ = 0F;
      bitField0_ = (bitField0_ & ~0x00004000);
      rHipYawPitch_ = 0F;
      bitField0_ = (bitField0_ & ~0x00008000);
      lHipRoll_ = 0F;
      bitField0_ = (bitField0_ & ~0x00010000);
      lHipPitch_ = 0F;
      bitField0_ = (bitField0_ & ~0x00020000);
      lKneePitch_ = 0F;
      bitField0_ = (bitField0_ & ~0x00040000);
      lAnklePitch_ = 0F;
      bitField0_ = (bitField0_ & ~0x00080000);
      lAnkleRoll_ = 0F;
      bitField0_ = (bitField0_ & ~0x00100000);
      rHipRoll_ = 0F;
      bitField0_ = (bitField0_ & ~0x00200000);
      rHipPitch_ = 0F;
      bitField0_ = (bitField0_ & ~0x00400000);
      rKneePitch_ = 0F;
      bitField0_ = (bitField0_ & ~0x00800000);
      rAnklePitch_ = 0F;
      bitField0_ = (bitField0_ & ~0x01000000);
      rAnkleRoll_ = 0F;
      bitField0_ = (bitField0_ & ~0x02000000);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return messages._File_PMotion.internal_static_messages_JointAngles_descriptor;
    }

    public messages.JointAngles getDefaultInstanceForType() {
      return messages.JointAngles.getDefaultInstance();
    }

    public messages.JointAngles build() {
      messages.JointAngles result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public messages.JointAngles buildPartial() {
      messages.JointAngles result = new messages.JointAngles(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.headYaw_ = headYaw_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.headPitch_ = headPitch_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.lShoulderPitch_ = lShoulderPitch_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.lShoulderRoll_ = lShoulderRoll_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.lElbowYaw_ = lElbowYaw_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.lElbowRoll_ = lElbowRoll_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000040;
      }
      result.lWristYaw_ = lWristYaw_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000080;
      }
      result.lHand_ = lHand_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000100;
      }
      result.rShoulderPitch_ = rShoulderPitch_;
      if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
        to_bitField0_ |= 0x00000200;
      }
      result.rShoulderRoll_ = rShoulderRoll_;
      if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
        to_bitField0_ |= 0x00000400;
      }
      result.rElbowYaw_ = rElbowYaw_;
      if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
        to_bitField0_ |= 0x00000800;
      }
      result.rElbowRoll_ = rElbowRoll_;
      if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
        to_bitField0_ |= 0x00001000;
      }
      result.rWristYaw_ = rWristYaw_;
      if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
        to_bitField0_ |= 0x00002000;
      }
      result.rHand_ = rHand_;
      if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
        to_bitField0_ |= 0x00004000;
      }
      result.lHipYawPitch_ = lHipYawPitch_;
      if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
        to_bitField0_ |= 0x00008000;
      }
      result.rHipYawPitch_ = rHipYawPitch_;
      if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
        to_bitField0_ |= 0x00010000;
      }
      result.lHipRoll_ = lHipRoll_;
      if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
        to_bitField0_ |= 0x00020000;
      }
      result.lHipPitch_ = lHipPitch_;
      if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
        to_bitField0_ |= 0x00040000;
      }
      result.lKneePitch_ = lKneePitch_;
      if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
        to_bitField0_ |= 0x00080000;
      }
      result.lAnklePitch_ = lAnklePitch_;
      if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
        to_bitField0_ |= 0x00100000;
      }
      result.lAnkleRoll_ = lAnkleRoll_;
      if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
        to_bitField0_ |= 0x00200000;
      }
      result.rHipRoll_ = rHipRoll_;
      if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
        to_bitField0_ |= 0x00400000;
      }
      result.rHipPitch_ = rHipPitch_;
      if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
        to_bitField0_ |= 0x00800000;
      }
      result.rKneePitch_ = rKneePitch_;
      if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
        to_bitField0_ |= 0x01000000;
      }
      result.rAnklePitch_ = rAnklePitch_;
      if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
        to_bitField0_ |= 0x02000000;
      }
      result.rAnkleRoll_ = rAnkleRoll_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof messages.JointAngles) {
        return mergeFrom((messages.JointAngles)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(messages.JointAngles other) {
      if (other == messages.JointAngles.getDefaultInstance()) return this;
      if (other.hasHeadYaw()) {
        setHeadYaw(other.getHeadYaw());
      }
      if (other.hasHeadPitch()) {
        setHeadPitch(other.getHeadPitch());
      }
      if (other.hasLShoulderPitch()) {
        setLShoulderPitch(other.getLShoulderPitch());
      }
      if (other.hasLShoulderRoll()) {
        setLShoulderRoll(other.getLShoulderRoll());
      }
      if (other.hasLElbowYaw()) {
        setLElbowYaw(other.getLElbowYaw());
      }
      if (other.hasLElbowRoll()) {
        setLElbowRoll(other.getLElbowRoll());
      }
      if (other.hasLWristYaw()) {
        setLWristYaw(other.getLWristYaw());
      }
      if (other.hasLHand()) {
        setLHand(other.getLHand());
      }
      if (other.hasRShoulderPitch()) {
        setRShoulderPitch(other.getRShoulderPitch());
      }
      if (other.hasRShoulderRoll()) {
        setRShoulderRoll(other.getRShoulderRoll());
      }
      if (other.hasRElbowYaw()) {
        setRElbowYaw(other.getRElbowYaw());
      }
      if (other.hasRElbowRoll()) {
        setRElbowRoll(other.getRElbowRoll());
      }
      if (other.hasRWristYaw()) {
        setRWristYaw(other.getRWristYaw());
      }
      if (other.hasRHand()) {
        setRHand(other.getRHand());
      }
      if (other.hasLHipYawPitch()) {
        setLHipYawPitch(other.getLHipYawPitch());
      }
      if (other.hasRHipYawPitch()) {
        setRHipYawPitch(other.getRHipYawPitch());
      }
      if (other.hasLHipRoll()) {
        setLHipRoll(other.getLHipRoll());
      }
      if (other.hasLHipPitch()) {
        setLHipPitch(other.getLHipPitch());
      }
      if (other.hasLKneePitch()) {
        setLKneePitch(other.getLKneePitch());
      }
      if (other.hasLAnklePitch()) {
        setLAnklePitch(other.getLAnklePitch());
      }
      if (other.hasLAnkleRoll()) {
        setLAnkleRoll(other.getLAnkleRoll());
      }
      if (other.hasRHipRoll()) {
        setRHipRoll(other.getRHipRoll());
      }
      if (other.hasRHipPitch()) {
        setRHipPitch(other.getRHipPitch());
      }
      if (other.hasRKneePitch()) {
        setRKneePitch(other.getRKneePitch());
      }
      if (other.hasRAnklePitch()) {
        setRAnklePitch(other.getRAnklePitch());
      }
      if (other.hasRAnkleRoll()) {
        setRAnkleRoll(other.getRAnkleRoll());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      messages.JointAngles parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (messages.JointAngles) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private float headYaw_ ;
    /**
     * <code>optional float head_yaw = 1;</code>
     *
     * <pre>
     * Head angles.
     * </pre>
     */
    public boolean hasHeadYaw() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float head_yaw = 1;</code>
     *
     * <pre>
     * Head angles.
     * </pre>
     */
    public float getHeadYaw() {
      return headYaw_;
    }
    /**
     * <code>optional float head_yaw = 1;</code>
     *
     * <pre>
     * Head angles.
     * </pre>
     */
    public Builder setHeadYaw(float value) {
      bitField0_ |= 0x00000001;
      headYaw_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float head_yaw = 1;</code>
     *
     * <pre>
     * Head angles.
     * </pre>
     */
    public Builder clearHeadYaw() {
      bitField0_ = (bitField0_ & ~0x00000001);
      headYaw_ = 0F;
      onChanged();
      return this;
    }

    private float headPitch_ ;
    /**
     * <code>optional float head_pitch = 2;</code>
     */
    public boolean hasHeadPitch() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float head_pitch = 2;</code>
     */
    public float getHeadPitch() {
      return headPitch_;
    }
    /**
     * <code>optional float head_pitch = 2;</code>
     */
    public Builder setHeadPitch(float value) {
      bitField0_ |= 0x00000002;
      headPitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float head_pitch = 2;</code>
     */
    public Builder clearHeadPitch() {
      bitField0_ = (bitField0_ & ~0x00000002);
      headPitch_ = 0F;
      onChanged();
      return this;
    }

    private float lShoulderPitch_ ;
    /**
     * <code>optional float l_shoulder_pitch = 3;</code>
     *
     * <pre>
     * Left arm angles.
     * </pre>
     */
    public boolean hasLShoulderPitch() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float l_shoulder_pitch = 3;</code>
     *
     * <pre>
     * Left arm angles.
     * </pre>
     */
    public float getLShoulderPitch() {
      return lShoulderPitch_;
    }
    /**
     * <code>optional float l_shoulder_pitch = 3;</code>
     *
     * <pre>
     * Left arm angles.
     * </pre>
     */
    public Builder setLShoulderPitch(float value) {
      bitField0_ |= 0x00000004;
      lShoulderPitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float l_shoulder_pitch = 3;</code>
     *
     * <pre>
     * Left arm angles.
     * </pre>
     */
    public Builder clearLShoulderPitch() {
      bitField0_ = (bitField0_ & ~0x00000004);
      lShoulderPitch_ = 0F;
      onChanged();
      return this;
    }

    private float lShoulderRoll_ ;
    /**
     * <code>optional float l_shoulder_roll = 4;</code>
     */
    public boolean hasLShoulderRoll() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float l_shoulder_roll = 4;</code>
     */
    public float getLShoulderRoll() {
      return lShoulderRoll_;
    }
    /**
     * <code>optional float l_shoulder_roll = 4;</code>
     */
    public Builder setLShoulderRoll(float value) {
      bitField0_ |= 0x00000008;
      lShoulderRoll_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float l_shoulder_roll = 4;</code>
     */
    public Builder clearLShoulderRoll() {
      bitField0_ = (bitField0_ & ~0x00000008);
      lShoulderRoll_ = 0F;
      onChanged();
      return this;
    }

    private float lElbowYaw_ ;
    /**
     * <code>optional float l_elbow_yaw = 5;</code>
     */
    public boolean hasLElbowYaw() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float l_elbow_yaw = 5;</code>
     */
    public float getLElbowYaw() {
      return lElbowYaw_;
    }
    /**
     * <code>optional float l_elbow_yaw = 5;</code>
     */
    public Builder setLElbowYaw(float value) {
      bitField0_ |= 0x00000010;
      lElbowYaw_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float l_elbow_yaw = 5;</code>
     */
    public Builder clearLElbowYaw() {
      bitField0_ = (bitField0_ & ~0x00000010);
      lElbowYaw_ = 0F;
      onChanged();
      return this;
    }

    private float lElbowRoll_ ;
    /**
     * <code>optional float l_elbow_roll = 6;</code>
     */
    public boolean hasLElbowRoll() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float l_elbow_roll = 6;</code>
     */
    public float getLElbowRoll() {
      return lElbowRoll_;
    }
    /**
     * <code>optional float l_elbow_roll = 6;</code>
     */
    public Builder setLElbowRoll(float value) {
      bitField0_ |= 0x00000020;
      lElbowRoll_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float l_elbow_roll = 6;</code>
     */
    public Builder clearLElbowRoll() {
      bitField0_ = (bitField0_ & ~0x00000020);
      lElbowRoll_ = 0F;
      onChanged();
      return this;
    }

    private float lWristYaw_ ;
    /**
     * <code>optional float l_wrist_yaw = 7;</code>
     */
    public boolean hasLWristYaw() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float l_wrist_yaw = 7;</code>
     */
    public float getLWristYaw() {
      return lWristYaw_;
    }
    /**
     * <code>optional float l_wrist_yaw = 7;</code>
     */
    public Builder setLWristYaw(float value) {
      bitField0_ |= 0x00000040;
      lWristYaw_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float l_wrist_yaw = 7;</code>
     */
    public Builder clearLWristYaw() {
      bitField0_ = (bitField0_ & ~0x00000040);
      lWristYaw_ = 0F;
      onChanged();
      return this;
    }

    private float lHand_ ;
    /**
     * <code>optional float l_hand = 8;</code>
     */
    public boolean hasLHand() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float l_hand = 8;</code>
     */
    public float getLHand() {
      return lHand_;
    }
    /**
     * <code>optional float l_hand = 8;</code>
     */
    public Builder setLHand(float value) {
      bitField0_ |= 0x00000080;
      lHand_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float l_hand = 8;</code>
     */
    public Builder clearLHand() {
      bitField0_ = (bitField0_ & ~0x00000080);
      lHand_ = 0F;
      onChanged();
      return this;
    }

    private float rShoulderPitch_ ;
    /**
     * <code>optional float r_shoulder_pitch = 9;</code>
     *
     * <pre>
     * Right arm angles.
     * </pre>
     */
    public boolean hasRShoulderPitch() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float r_shoulder_pitch = 9;</code>
     *
     * <pre>
     * Right arm angles.
     * </pre>
     */
    public float getRShoulderPitch() {
      return rShoulderPitch_;
    }
    /**
     * <code>optional float r_shoulder_pitch = 9;</code>
     *
     * <pre>
     * Right arm angles.
     * </pre>
     */
    public Builder setRShoulderPitch(float value) {
      bitField0_ |= 0x00000100;
      rShoulderPitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float r_shoulder_pitch = 9;</code>
     *
     * <pre>
     * Right arm angles.
     * </pre>
     */
    public Builder clearRShoulderPitch() {
      bitField0_ = (bitField0_ & ~0x00000100);
      rShoulderPitch_ = 0F;
      onChanged();
      return this;
    }

    private float rShoulderRoll_ ;
    /**
     * <code>optional float r_shoulder_roll = 10;</code>
     */
    public boolean hasRShoulderRoll() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float r_shoulder_roll = 10;</code>
     */
    public float getRShoulderRoll() {
      return rShoulderRoll_;
    }
    /**
     * <code>optional float r_shoulder_roll = 10;</code>
     */
    public Builder setRShoulderRoll(float value) {
      bitField0_ |= 0x00000200;
      rShoulderRoll_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float r_shoulder_roll = 10;</code>
     */
    public Builder clearRShoulderRoll() {
      bitField0_ = (bitField0_ & ~0x00000200);
      rShoulderRoll_ = 0F;
      onChanged();
      return this;
    }

    private float rElbowYaw_ ;
    /**
     * <code>optional float r_elbow_yaw = 11;</code>
     */
    public boolean hasRElbowYaw() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float r_elbow_yaw = 11;</code>
     */
    public float getRElbowYaw() {
      return rElbowYaw_;
    }
    /**
     * <code>optional float r_elbow_yaw = 11;</code>
     */
    public Builder setRElbowYaw(float value) {
      bitField0_ |= 0x00000400;
      rElbowYaw_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float r_elbow_yaw = 11;</code>
     */
    public Builder clearRElbowYaw() {
      bitField0_ = (bitField0_ & ~0x00000400);
      rElbowYaw_ = 0F;
      onChanged();
      return this;
    }

    private float rElbowRoll_ ;
    /**
     * <code>optional float r_elbow_roll = 12;</code>
     */
    public boolean hasRElbowRoll() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float r_elbow_roll = 12;</code>
     */
    public float getRElbowRoll() {
      return rElbowRoll_;
    }
    /**
     * <code>optional float r_elbow_roll = 12;</code>
     */
    public Builder setRElbowRoll(float value) {
      bitField0_ |= 0x00000800;
      rElbowRoll_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float r_elbow_roll = 12;</code>
     */
    public Builder clearRElbowRoll() {
      bitField0_ = (bitField0_ & ~0x00000800);
      rElbowRoll_ = 0F;
      onChanged();
      return this;
    }

    private float rWristYaw_ ;
    /**
     * <code>optional float r_wrist_yaw = 13;</code>
     */
    public boolean hasRWristYaw() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float r_wrist_yaw = 13;</code>
     */
    public float getRWristYaw() {
      return rWristYaw_;
    }
    /**
     * <code>optional float r_wrist_yaw = 13;</code>
     */
    public Builder setRWristYaw(float value) {
      bitField0_ |= 0x00001000;
      rWristYaw_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float r_wrist_yaw = 13;</code>
     */
    public Builder clearRWristYaw() {
      bitField0_ = (bitField0_ & ~0x00001000);
      rWristYaw_ = 0F;
      onChanged();
      return this;
    }

    private float rHand_ ;
    /**
     * <code>optional float r_hand = 14;</code>
     */
    public boolean hasRHand() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float r_hand = 14;</code>
     */
    public float getRHand() {
      return rHand_;
    }
    /**
     * <code>optional float r_hand = 14;</code>
     */
    public Builder setRHand(float value) {
      bitField0_ |= 0x00002000;
      rHand_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float r_hand = 14;</code>
     */
    public Builder clearRHand() {
      bitField0_ = (bitField0_ & ~0x00002000);
      rHand_ = 0F;
      onChanged();
      return this;
    }

    private float lHipYawPitch_ ;
    /**
     * <code>optional float l_hip_yaw_pitch = 15;</code>
     *
     * <pre>
     * Pelvis angles.
     * </pre>
     */
    public boolean hasLHipYawPitch() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float l_hip_yaw_pitch = 15;</code>
     *
     * <pre>
     * Pelvis angles.
     * </pre>
     */
    public float getLHipYawPitch() {
      return lHipYawPitch_;
    }
    /**
     * <code>optional float l_hip_yaw_pitch = 15;</code>
     *
     * <pre>
     * Pelvis angles.
     * </pre>
     */
    public Builder setLHipYawPitch(float value) {
      bitField0_ |= 0x00004000;
      lHipYawPitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float l_hip_yaw_pitch = 15;</code>
     *
     * <pre>
     * Pelvis angles.
     * </pre>
     */
    public Builder clearLHipYawPitch() {
      bitField0_ = (bitField0_ & ~0x00004000);
      lHipYawPitch_ = 0F;
      onChanged();
      return this;
    }

    private float rHipYawPitch_ ;
    /**
     * <code>optional float r_hip_yaw_pitch = 16;</code>
     */
    public boolean hasRHipYawPitch() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float r_hip_yaw_pitch = 16;</code>
     */
    public float getRHipYawPitch() {
      return rHipYawPitch_;
    }
    /**
     * <code>optional float r_hip_yaw_pitch = 16;</code>
     */
    public Builder setRHipYawPitch(float value) {
      bitField0_ |= 0x00008000;
      rHipYawPitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float r_hip_yaw_pitch = 16;</code>
     */
    public Builder clearRHipYawPitch() {
      bitField0_ = (bitField0_ & ~0x00008000);
      rHipYawPitch_ = 0F;
      onChanged();
      return this;
    }

    private float lHipRoll_ ;
    /**
     * <code>optional float l_hip_roll = 17;</code>
     *
     * <pre>
     * Left leg angles.
     * </pre>
     */
    public boolean hasLHipRoll() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float l_hip_roll = 17;</code>
     *
     * <pre>
     * Left leg angles.
     * </pre>
     */
    public float getLHipRoll() {
      return lHipRoll_;
    }
    /**
     * <code>optional float l_hip_roll = 17;</code>
     *
     * <pre>
     * Left leg angles.
     * </pre>
     */
    public Builder setLHipRoll(float value) {
      bitField0_ |= 0x00010000;
      lHipRoll_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float l_hip_roll = 17;</code>
     *
     * <pre>
     * Left leg angles.
     * </pre>
     */
    public Builder clearLHipRoll() {
      bitField0_ = (bitField0_ & ~0x00010000);
      lHipRoll_ = 0F;
      onChanged();
      return this;
    }

    private float lHipPitch_ ;
    /**
     * <code>optional float l_hip_pitch = 18;</code>
     */
    public boolean hasLHipPitch() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float l_hip_pitch = 18;</code>
     */
    public float getLHipPitch() {
      return lHipPitch_;
    }
    /**
     * <code>optional float l_hip_pitch = 18;</code>
     */
    public Builder setLHipPitch(float value) {
      bitField0_ |= 0x00020000;
      lHipPitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float l_hip_pitch = 18;</code>
     */
    public Builder clearLHipPitch() {
      bitField0_ = (bitField0_ & ~0x00020000);
      lHipPitch_ = 0F;
      onChanged();
      return this;
    }

    private float lKneePitch_ ;
    /**
     * <code>optional float l_knee_pitch = 19;</code>
     */
    public boolean hasLKneePitch() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional float l_knee_pitch = 19;</code>
     */
    public float getLKneePitch() {
      return lKneePitch_;
    }
    /**
     * <code>optional float l_knee_pitch = 19;</code>
     */
    public Builder setLKneePitch(float value) {
      bitField0_ |= 0x00040000;
      lKneePitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float l_knee_pitch = 19;</code>
     */
    public Builder clearLKneePitch() {
      bitField0_ = (bitField0_ & ~0x00040000);
      lKneePitch_ = 0F;
      onChanged();
      return this;
    }

    private float lAnklePitch_ ;
    /**
     * <code>optional float l_ankle_pitch = 20;</code>
     */
    public boolean hasLAnklePitch() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional float l_ankle_pitch = 20;</code>
     */
    public float getLAnklePitch() {
      return lAnklePitch_;
    }
    /**
     * <code>optional float l_ankle_pitch = 20;</code>
     */
    public Builder setLAnklePitch(float value) {
      bitField0_ |= 0x00080000;
      lAnklePitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float l_ankle_pitch = 20;</code>
     */
    public Builder clearLAnklePitch() {
      bitField0_ = (bitField0_ & ~0x00080000);
      lAnklePitch_ = 0F;
      onChanged();
      return this;
    }

    private float lAnkleRoll_ ;
    /**
     * <code>optional float l_ankle_roll = 21;</code>
     */
    public boolean hasLAnkleRoll() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional float l_ankle_roll = 21;</code>
     */
    public float getLAnkleRoll() {
      return lAnkleRoll_;
    }
    /**
     * <code>optional float l_ankle_roll = 21;</code>
     */
    public Builder setLAnkleRoll(float value) {
      bitField0_ |= 0x00100000;
      lAnkleRoll_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float l_ankle_roll = 21;</code>
     */
    public Builder clearLAnkleRoll() {
      bitField0_ = (bitField0_ & ~0x00100000);
      lAnkleRoll_ = 0F;
      onChanged();
      return this;
    }

    private float rHipRoll_ ;
    /**
     * <code>optional float r_hip_roll = 22;</code>
     *
     * <pre>
     * Right leg angles.
     * </pre>
     */
    public boolean hasRHipRoll() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional float r_hip_roll = 22;</code>
     *
     * <pre>
     * Right leg angles.
     * </pre>
     */
    public float getRHipRoll() {
      return rHipRoll_;
    }
    /**
     * <code>optional float r_hip_roll = 22;</code>
     *
     * <pre>
     * Right leg angles.
     * </pre>
     */
    public Builder setRHipRoll(float value) {
      bitField0_ |= 0x00200000;
      rHipRoll_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float r_hip_roll = 22;</code>
     *
     * <pre>
     * Right leg angles.
     * </pre>
     */
    public Builder clearRHipRoll() {
      bitField0_ = (bitField0_ & ~0x00200000);
      rHipRoll_ = 0F;
      onChanged();
      return this;
    }

    private float rHipPitch_ ;
    /**
     * <code>optional float r_hip_pitch = 23;</code>
     */
    public boolean hasRHipPitch() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional float r_hip_pitch = 23;</code>
     */
    public float getRHipPitch() {
      return rHipPitch_;
    }
    /**
     * <code>optional float r_hip_pitch = 23;</code>
     */
    public Builder setRHipPitch(float value) {
      bitField0_ |= 0x00400000;
      rHipPitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float r_hip_pitch = 23;</code>
     */
    public Builder clearRHipPitch() {
      bitField0_ = (bitField0_ & ~0x00400000);
      rHipPitch_ = 0F;
      onChanged();
      return this;
    }

    private float rKneePitch_ ;
    /**
     * <code>optional float r_knee_pitch = 24;</code>
     */
    public boolean hasRKneePitch() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional float r_knee_pitch = 24;</code>
     */
    public float getRKneePitch() {
      return rKneePitch_;
    }
    /**
     * <code>optional float r_knee_pitch = 24;</code>
     */
    public Builder setRKneePitch(float value) {
      bitField0_ |= 0x00800000;
      rKneePitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float r_knee_pitch = 24;</code>
     */
    public Builder clearRKneePitch() {
      bitField0_ = (bitField0_ & ~0x00800000);
      rKneePitch_ = 0F;
      onChanged();
      return this;
    }

    private float rAnklePitch_ ;
    /**
     * <code>optional float r_ankle_pitch = 25;</code>
     */
    public boolean hasRAnklePitch() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional float r_ankle_pitch = 25;</code>
     */
    public float getRAnklePitch() {
      return rAnklePitch_;
    }
    /**
     * <code>optional float r_ankle_pitch = 25;</code>
     */
    public Builder setRAnklePitch(float value) {
      bitField0_ |= 0x01000000;
      rAnklePitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float r_ankle_pitch = 25;</code>
     */
    public Builder clearRAnklePitch() {
      bitField0_ = (bitField0_ & ~0x01000000);
      rAnklePitch_ = 0F;
      onChanged();
      return this;
    }

    private float rAnkleRoll_ ;
    /**
     * <code>optional float r_ankle_roll = 26;</code>
     */
    public boolean hasRAnkleRoll() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional float r_ankle_roll = 26;</code>
     */
    public float getRAnkleRoll() {
      return rAnkleRoll_;
    }
    /**
     * <code>optional float r_ankle_roll = 26;</code>
     */
    public Builder setRAnkleRoll(float value) {
      bitField0_ |= 0x02000000;
      rAnkleRoll_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float r_ankle_roll = 26;</code>
     */
    public Builder clearRAnkleRoll() {
      bitField0_ = (bitField0_ & ~0x02000000);
      rAnkleRoll_ = 0F;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:messages.JointAngles)
  }

  static {
    defaultInstance = new JointAngles(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:messages.JointAngles)
}

