// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldModel.proto

package messages;

/**
 * Protobuf type {@code messages.WorldModel}
 */
public final class WorldModel extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:messages.WorldModel)
    WorldModelOrBuilder {
  // Use WorldModel.newBuilder() to construct.
  private WorldModel(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private WorldModel(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final WorldModel defaultInstance;
  public static WorldModel getDefaultInstance() {
    return defaultInstance;
  }

  public WorldModel getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final com.google.protobuf.UnknownFieldSet unknownFields;
  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private WorldModel(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            timestamp_ = input.readInt64();
            break;
          }
          case 21: {
            bitField0_ |= 0x00000002;
            myX_ = input.readFloat();
            break;
          }
          case 29: {
            bitField0_ |= 0x00000004;
            myY_ = input.readFloat();
            break;
          }
          case 37: {
            bitField0_ |= 0x00000008;
            myH_ = input.readFloat();
            break;
          }
          case 45: {
            bitField0_ |= 0x00000010;
            myUncert_ = input.readFloat();
            break;
          }
          case 53: {
            bitField0_ |= 0x00000020;
            walkingToX_ = input.readFloat();
            break;
          }
          case 61: {
            bitField0_ |= 0x00000040;
            walkingToY_ = input.readFloat();
            break;
          }
          case 64: {
            bitField0_ |= 0x00000080;
            ballOn_ = input.readBool();
            break;
          }
          case 72: {
            bitField0_ |= 0x00000100;
            ballAge_ = input.readInt32();
            break;
          }
          case 85: {
            bitField0_ |= 0x00000200;
            ballDist_ = input.readFloat();
            break;
          }
          case 93: {
            bitField0_ |= 0x00000400;
            ballBearing_ = input.readFloat();
            break;
          }
          case 101: {
            bitField0_ |= 0x00000800;
            ballVelX_ = input.readFloat();
            break;
          }
          case 109: {
            bitField0_ |= 0x00001000;
            ballVelY_ = input.readFloat();
            break;
          }
          case 117: {
            bitField0_ |= 0x00002000;
            ballUncert_ = input.readFloat();
            break;
          }
          case 120: {
            bitField0_ |= 0x00004000;
            role_ = input.readInt32();
            break;
          }
          case 128: {
            bitField0_ |= 0x00008000;
            inKickingState_ = input.readBool();
            break;
          }
          case 141: {
            bitField0_ |= 0x00010000;
            kickingToX_ = input.readFloat();
            break;
          }
          case 149: {
            bitField0_ |= 0x00020000;
            kickingToY_ = input.readFloat();
            break;
          }
          case 152: {
            bitField0_ |= 0x00040000;
            fallen_ = input.readBool();
            break;
          }
          case 160: {
            bitField0_ |= 0x00080000;
            active_ = input.readBool();
            break;
          }
          case 168: {
            bitField0_ |= 0x00100000;
            claimedBall_ = input.readBool();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return messages._File_WorldModel.internal_static_messages_WorldModel_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return messages._File_WorldModel.internal_static_messages_WorldModel_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            messages.WorldModel.class, messages.WorldModel.Builder.class);
  }

  public static com.google.protobuf.Parser<WorldModel> PARSER =
      new com.google.protobuf.AbstractParser<WorldModel>() {
    public WorldModel parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new WorldModel(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<WorldModel> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int TIMESTAMP_FIELD_NUMBER = 1;
  private long timestamp_;
  /**
   * <code>optional int64 timestamp = 1;</code>
   */
  public boolean hasTimestamp() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional int64 timestamp = 1;</code>
   */
  public long getTimestamp() {
    return timestamp_;
  }

  public static final int MY_X_FIELD_NUMBER = 2;
  private float myX_;
  /**
   * <code>optional float my_x = 2;</code>
   */
  public boolean hasMyX() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional float my_x = 2;</code>
   */
  public float getMyX() {
    return myX_;
  }

  public static final int MY_Y_FIELD_NUMBER = 3;
  private float myY_;
  /**
   * <code>optional float my_y = 3;</code>
   */
  public boolean hasMyY() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional float my_y = 3;</code>
   */
  public float getMyY() {
    return myY_;
  }

  public static final int MY_H_FIELD_NUMBER = 4;
  private float myH_;
  /**
   * <code>optional float my_h = 4;</code>
   */
  public boolean hasMyH() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional float my_h = 4;</code>
   */
  public float getMyH() {
    return myH_;
  }

  public static final int MY_UNCERT_FIELD_NUMBER = 5;
  private float myUncert_;
  /**
   * <code>optional float my_uncert = 5;</code>
   */
  public boolean hasMyUncert() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional float my_uncert = 5;</code>
   */
  public float getMyUncert() {
    return myUncert_;
  }

  public static final int WALKING_TO_X_FIELD_NUMBER = 6;
  private float walkingToX_;
  /**
   * <code>optional float walking_to_x = 6;</code>
   */
  public boolean hasWalkingToX() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>optional float walking_to_x = 6;</code>
   */
  public float getWalkingToX() {
    return walkingToX_;
  }

  public static final int WALKING_TO_Y_FIELD_NUMBER = 7;
  private float walkingToY_;
  /**
   * <code>optional float walking_to_y = 7;</code>
   */
  public boolean hasWalkingToY() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <code>optional float walking_to_y = 7;</code>
   */
  public float getWalkingToY() {
    return walkingToY_;
  }

  public static final int BALL_ON_FIELD_NUMBER = 8;
  private boolean ballOn_;
  /**
   * <code>optional bool ball_on = 8;</code>
   */
  public boolean hasBallOn() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional bool ball_on = 8;</code>
   */
  public boolean getBallOn() {
    return ballOn_;
  }

  public static final int BALL_AGE_FIELD_NUMBER = 9;
  private int ballAge_;
  /**
   * <code>optional int32 ball_age = 9;</code>
   */
  public boolean hasBallAge() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <code>optional int32 ball_age = 9;</code>
   */
  public int getBallAge() {
    return ballAge_;
  }

  public static final int BALL_DIST_FIELD_NUMBER = 10;
  private float ballDist_;
  /**
   * <code>optional float ball_dist = 10;</code>
   */
  public boolean hasBallDist() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <code>optional float ball_dist = 10;</code>
   */
  public float getBallDist() {
    return ballDist_;
  }

  public static final int BALL_BEARING_FIELD_NUMBER = 11;
  private float ballBearing_;
  /**
   * <code>optional float ball_bearing = 11;</code>
   */
  public boolean hasBallBearing() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <code>optional float ball_bearing = 11;</code>
   */
  public float getBallBearing() {
    return ballBearing_;
  }

  public static final int BALL_VEL_X_FIELD_NUMBER = 12;
  private float ballVelX_;
  /**
   * <code>optional float ball_vel_x = 12;</code>
   */
  public boolean hasBallVelX() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <code>optional float ball_vel_x = 12;</code>
   */
  public float getBallVelX() {
    return ballVelX_;
  }

  public static final int BALL_VEL_Y_FIELD_NUMBER = 13;
  private float ballVelY_;
  /**
   * <code>optional float ball_vel_y = 13;</code>
   */
  public boolean hasBallVelY() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <code>optional float ball_vel_y = 13;</code>
   */
  public float getBallVelY() {
    return ballVelY_;
  }

  public static final int BALL_UNCERT_FIELD_NUMBER = 14;
  private float ballUncert_;
  /**
   * <code>optional float ball_uncert = 14;</code>
   */
  public boolean hasBallUncert() {
    return ((bitField0_ & 0x00002000) == 0x00002000);
  }
  /**
   * <code>optional float ball_uncert = 14;</code>
   */
  public float getBallUncert() {
    return ballUncert_;
  }

  public static final int ROLE_FIELD_NUMBER = 15;
  private int role_;
  /**
   * <code>optional int32 role = 15;</code>
   */
  public boolean hasRole() {
    return ((bitField0_ & 0x00004000) == 0x00004000);
  }
  /**
   * <code>optional int32 role = 15;</code>
   */
  public int getRole() {
    return role_;
  }

  public static final int IN_KICKING_STATE_FIELD_NUMBER = 16;
  private boolean inKickingState_;
  /**
   * <code>optional bool in_kicking_state = 16;</code>
   */
  public boolean hasInKickingState() {
    return ((bitField0_ & 0x00008000) == 0x00008000);
  }
  /**
   * <code>optional bool in_kicking_state = 16;</code>
   */
  public boolean getInKickingState() {
    return inKickingState_;
  }

  public static final int KICKING_TO_X_FIELD_NUMBER = 17;
  private float kickingToX_;
  /**
   * <code>optional float kicking_to_x = 17;</code>
   */
  public boolean hasKickingToX() {
    return ((bitField0_ & 0x00010000) == 0x00010000);
  }
  /**
   * <code>optional float kicking_to_x = 17;</code>
   */
  public float getKickingToX() {
    return kickingToX_;
  }

  public static final int KICKING_TO_Y_FIELD_NUMBER = 18;
  private float kickingToY_;
  /**
   * <code>optional float kicking_to_y = 18;</code>
   */
  public boolean hasKickingToY() {
    return ((bitField0_ & 0x00020000) == 0x00020000);
  }
  /**
   * <code>optional float kicking_to_y = 18;</code>
   */
  public float getKickingToY() {
    return kickingToY_;
  }

  public static final int FALLEN_FIELD_NUMBER = 19;
  private boolean fallen_;
  /**
   * <code>optional bool fallen = 19;</code>
   */
  public boolean hasFallen() {
    return ((bitField0_ & 0x00040000) == 0x00040000);
  }
  /**
   * <code>optional bool fallen = 19;</code>
   */
  public boolean getFallen() {
    return fallen_;
  }

  public static final int ACTIVE_FIELD_NUMBER = 20;
  private boolean active_;
  /**
   * <code>optional bool active = 20;</code>
   */
  public boolean hasActive() {
    return ((bitField0_ & 0x00080000) == 0x00080000);
  }
  /**
   * <code>optional bool active = 20;</code>
   */
  public boolean getActive() {
    return active_;
  }

  public static final int CLAIMED_BALL_FIELD_NUMBER = 21;
  private boolean claimedBall_;
  /**
   * <code>optional bool claimed_ball = 21;</code>
   */
  public boolean hasClaimedBall() {
    return ((bitField0_ & 0x00100000) == 0x00100000);
  }
  /**
   * <code>optional bool claimed_ball = 21;</code>
   */
  public boolean getClaimedBall() {
    return claimedBall_;
  }

  private void initFields() {
    timestamp_ = 0L;
    myX_ = 0F;
    myY_ = 0F;
    myH_ = 0F;
    myUncert_ = 0F;
    walkingToX_ = 0F;
    walkingToY_ = 0F;
    ballOn_ = false;
    ballAge_ = 0;
    ballDist_ = 0F;
    ballBearing_ = 0F;
    ballVelX_ = 0F;
    ballVelY_ = 0F;
    ballUncert_ = 0F;
    role_ = 0;
    inKickingState_ = false;
    kickingToX_ = 0F;
    kickingToY_ = 0F;
    fallen_ = false;
    active_ = false;
    claimedBall_ = false;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt64(1, timestamp_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeFloat(2, myX_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeFloat(3, myY_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeFloat(4, myH_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeFloat(5, myUncert_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeFloat(6, walkingToX_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeFloat(7, walkingToY_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeBool(8, ballOn_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeInt32(9, ballAge_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeFloat(10, ballDist_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeFloat(11, ballBearing_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeFloat(12, ballVelX_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeFloat(13, ballVelY_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      output.writeFloat(14, ballUncert_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      output.writeInt32(15, role_);
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      output.writeBool(16, inKickingState_);
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      output.writeFloat(17, kickingToX_);
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      output.writeFloat(18, kickingToY_);
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      output.writeBool(19, fallen_);
    }
    if (((bitField0_ & 0x00080000) == 0x00080000)) {
      output.writeBool(20, active_);
    }
    if (((bitField0_ & 0x00100000) == 0x00100000)) {
      output.writeBool(21, claimedBall_);
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(1, timestamp_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(2, myX_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(3, myY_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(4, myH_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(5, myUncert_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(6, walkingToX_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(7, walkingToY_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, ballOn_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, ballAge_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(10, ballDist_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(11, ballBearing_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(12, ballVelX_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(13, ballVelY_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(14, ballUncert_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(15, role_);
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(16, inKickingState_);
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(17, kickingToX_);
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(18, kickingToY_);
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(19, fallen_);
    }
    if (((bitField0_ & 0x00080000) == 0x00080000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(20, active_);
    }
    if (((bitField0_ & 0x00100000) == 0x00100000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(21, claimedBall_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static messages.WorldModel parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static messages.WorldModel parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static messages.WorldModel parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static messages.WorldModel parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static messages.WorldModel parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static messages.WorldModel parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static messages.WorldModel parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static messages.WorldModel parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static messages.WorldModel parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static messages.WorldModel parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(messages.WorldModel prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code messages.WorldModel}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:messages.WorldModel)
      messages.WorldModelOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return messages._File_WorldModel.internal_static_messages_WorldModel_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return messages._File_WorldModel.internal_static_messages_WorldModel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              messages.WorldModel.class, messages.WorldModel.Builder.class);
    }

    // Construct using messages.WorldModel.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      timestamp_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000001);
      myX_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000002);
      myY_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000004);
      myH_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000008);
      myUncert_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000010);
      walkingToX_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000020);
      walkingToY_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000040);
      ballOn_ = false;
      bitField0_ = (bitField0_ & ~0x00000080);
      ballAge_ = 0;
      bitField0_ = (bitField0_ & ~0x00000100);
      ballDist_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000200);
      ballBearing_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000400);
      ballVelX_ = 0F;
      bitField0_ = (bitField0_ & ~0x00000800);
      ballVelY_ = 0F;
      bitField0_ = (bitField0_ & ~0x00001000);
      ballUncert_ = 0F;
      bitField0_ = (bitField0_ & ~0x00002000);
      role_ = 0;
      bitField0_ = (bitField0_ & ~0x00004000);
      inKickingState_ = false;
      bitField0_ = (bitField0_ & ~0x00008000);
      kickingToX_ = 0F;
      bitField0_ = (bitField0_ & ~0x00010000);
      kickingToY_ = 0F;
      bitField0_ = (bitField0_ & ~0x00020000);
      fallen_ = false;
      bitField0_ = (bitField0_ & ~0x00040000);
      active_ = false;
      bitField0_ = (bitField0_ & ~0x00080000);
      claimedBall_ = false;
      bitField0_ = (bitField0_ & ~0x00100000);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return messages._File_WorldModel.internal_static_messages_WorldModel_descriptor;
    }

    public messages.WorldModel getDefaultInstanceForType() {
      return messages.WorldModel.getDefaultInstance();
    }

    public messages.WorldModel build() {
      messages.WorldModel result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public messages.WorldModel buildPartial() {
      messages.WorldModel result = new messages.WorldModel(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.timestamp_ = timestamp_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.myX_ = myX_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.myY_ = myY_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.myH_ = myH_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.myUncert_ = myUncert_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.walkingToX_ = walkingToX_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000040;
      }
      result.walkingToY_ = walkingToY_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000080;
      }
      result.ballOn_ = ballOn_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000100;
      }
      result.ballAge_ = ballAge_;
      if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
        to_bitField0_ |= 0x00000200;
      }
      result.ballDist_ = ballDist_;
      if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
        to_bitField0_ |= 0x00000400;
      }
      result.ballBearing_ = ballBearing_;
      if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
        to_bitField0_ |= 0x00000800;
      }
      result.ballVelX_ = ballVelX_;
      if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
        to_bitField0_ |= 0x00001000;
      }
      result.ballVelY_ = ballVelY_;
      if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
        to_bitField0_ |= 0x00002000;
      }
      result.ballUncert_ = ballUncert_;
      if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
        to_bitField0_ |= 0x00004000;
      }
      result.role_ = role_;
      if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
        to_bitField0_ |= 0x00008000;
      }
      result.inKickingState_ = inKickingState_;
      if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
        to_bitField0_ |= 0x00010000;
      }
      result.kickingToX_ = kickingToX_;
      if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
        to_bitField0_ |= 0x00020000;
      }
      result.kickingToY_ = kickingToY_;
      if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
        to_bitField0_ |= 0x00040000;
      }
      result.fallen_ = fallen_;
      if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
        to_bitField0_ |= 0x00080000;
      }
      result.active_ = active_;
      if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
        to_bitField0_ |= 0x00100000;
      }
      result.claimedBall_ = claimedBall_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof messages.WorldModel) {
        return mergeFrom((messages.WorldModel)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(messages.WorldModel other) {
      if (other == messages.WorldModel.getDefaultInstance()) return this;
      if (other.hasTimestamp()) {
        setTimestamp(other.getTimestamp());
      }
      if (other.hasMyX()) {
        setMyX(other.getMyX());
      }
      if (other.hasMyY()) {
        setMyY(other.getMyY());
      }
      if (other.hasMyH()) {
        setMyH(other.getMyH());
      }
      if (other.hasMyUncert()) {
        setMyUncert(other.getMyUncert());
      }
      if (other.hasWalkingToX()) {
        setWalkingToX(other.getWalkingToX());
      }
      if (other.hasWalkingToY()) {
        setWalkingToY(other.getWalkingToY());
      }
      if (other.hasBallOn()) {
        setBallOn(other.getBallOn());
      }
      if (other.hasBallAge()) {
        setBallAge(other.getBallAge());
      }
      if (other.hasBallDist()) {
        setBallDist(other.getBallDist());
      }
      if (other.hasBallBearing()) {
        setBallBearing(other.getBallBearing());
      }
      if (other.hasBallVelX()) {
        setBallVelX(other.getBallVelX());
      }
      if (other.hasBallVelY()) {
        setBallVelY(other.getBallVelY());
      }
      if (other.hasBallUncert()) {
        setBallUncert(other.getBallUncert());
      }
      if (other.hasRole()) {
        setRole(other.getRole());
      }
      if (other.hasInKickingState()) {
        setInKickingState(other.getInKickingState());
      }
      if (other.hasKickingToX()) {
        setKickingToX(other.getKickingToX());
      }
      if (other.hasKickingToY()) {
        setKickingToY(other.getKickingToY());
      }
      if (other.hasFallen()) {
        setFallen(other.getFallen());
      }
      if (other.hasActive()) {
        setActive(other.getActive());
      }
      if (other.hasClaimedBall()) {
        setClaimedBall(other.getClaimedBall());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      messages.WorldModel parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (messages.WorldModel) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private long timestamp_ ;
    /**
     * <code>optional int64 timestamp = 1;</code>
     */
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 timestamp = 1;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }
    /**
     * <code>optional int64 timestamp = 1;</code>
     */
    public Builder setTimestamp(long value) {
      bitField0_ |= 0x00000001;
      timestamp_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 timestamp = 1;</code>
     */
    public Builder clearTimestamp() {
      bitField0_ = (bitField0_ & ~0x00000001);
      timestamp_ = 0L;
      onChanged();
      return this;
    }

    private float myX_ ;
    /**
     * <code>optional float my_x = 2;</code>
     */
    public boolean hasMyX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float my_x = 2;</code>
     */
    public float getMyX() {
      return myX_;
    }
    /**
     * <code>optional float my_x = 2;</code>
     */
    public Builder setMyX(float value) {
      bitField0_ |= 0x00000002;
      myX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float my_x = 2;</code>
     */
    public Builder clearMyX() {
      bitField0_ = (bitField0_ & ~0x00000002);
      myX_ = 0F;
      onChanged();
      return this;
    }

    private float myY_ ;
    /**
     * <code>optional float my_y = 3;</code>
     */
    public boolean hasMyY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float my_y = 3;</code>
     */
    public float getMyY() {
      return myY_;
    }
    /**
     * <code>optional float my_y = 3;</code>
     */
    public Builder setMyY(float value) {
      bitField0_ |= 0x00000004;
      myY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float my_y = 3;</code>
     */
    public Builder clearMyY() {
      bitField0_ = (bitField0_ & ~0x00000004);
      myY_ = 0F;
      onChanged();
      return this;
    }

    private float myH_ ;
    /**
     * <code>optional float my_h = 4;</code>
     */
    public boolean hasMyH() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float my_h = 4;</code>
     */
    public float getMyH() {
      return myH_;
    }
    /**
     * <code>optional float my_h = 4;</code>
     */
    public Builder setMyH(float value) {
      bitField0_ |= 0x00000008;
      myH_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float my_h = 4;</code>
     */
    public Builder clearMyH() {
      bitField0_ = (bitField0_ & ~0x00000008);
      myH_ = 0F;
      onChanged();
      return this;
    }

    private float myUncert_ ;
    /**
     * <code>optional float my_uncert = 5;</code>
     */
    public boolean hasMyUncert() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float my_uncert = 5;</code>
     */
    public float getMyUncert() {
      return myUncert_;
    }
    /**
     * <code>optional float my_uncert = 5;</code>
     */
    public Builder setMyUncert(float value) {
      bitField0_ |= 0x00000010;
      myUncert_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float my_uncert = 5;</code>
     */
    public Builder clearMyUncert() {
      bitField0_ = (bitField0_ & ~0x00000010);
      myUncert_ = 0F;
      onChanged();
      return this;
    }

    private float walkingToX_ ;
    /**
     * <code>optional float walking_to_x = 6;</code>
     */
    public boolean hasWalkingToX() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float walking_to_x = 6;</code>
     */
    public float getWalkingToX() {
      return walkingToX_;
    }
    /**
     * <code>optional float walking_to_x = 6;</code>
     */
    public Builder setWalkingToX(float value) {
      bitField0_ |= 0x00000020;
      walkingToX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float walking_to_x = 6;</code>
     */
    public Builder clearWalkingToX() {
      bitField0_ = (bitField0_ & ~0x00000020);
      walkingToX_ = 0F;
      onChanged();
      return this;
    }

    private float walkingToY_ ;
    /**
     * <code>optional float walking_to_y = 7;</code>
     */
    public boolean hasWalkingToY() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float walking_to_y = 7;</code>
     */
    public float getWalkingToY() {
      return walkingToY_;
    }
    /**
     * <code>optional float walking_to_y = 7;</code>
     */
    public Builder setWalkingToY(float value) {
      bitField0_ |= 0x00000040;
      walkingToY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float walking_to_y = 7;</code>
     */
    public Builder clearWalkingToY() {
      bitField0_ = (bitField0_ & ~0x00000040);
      walkingToY_ = 0F;
      onChanged();
      return this;
    }

    private boolean ballOn_ ;
    /**
     * <code>optional bool ball_on = 8;</code>
     */
    public boolean hasBallOn() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool ball_on = 8;</code>
     */
    public boolean getBallOn() {
      return ballOn_;
    }
    /**
     * <code>optional bool ball_on = 8;</code>
     */
    public Builder setBallOn(boolean value) {
      bitField0_ |= 0x00000080;
      ballOn_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool ball_on = 8;</code>
     */
    public Builder clearBallOn() {
      bitField0_ = (bitField0_ & ~0x00000080);
      ballOn_ = false;
      onChanged();
      return this;
    }

    private int ballAge_ ;
    /**
     * <code>optional int32 ball_age = 9;</code>
     */
    public boolean hasBallAge() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 ball_age = 9;</code>
     */
    public int getBallAge() {
      return ballAge_;
    }
    /**
     * <code>optional int32 ball_age = 9;</code>
     */
    public Builder setBallAge(int value) {
      bitField0_ |= 0x00000100;
      ballAge_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 ball_age = 9;</code>
     */
    public Builder clearBallAge() {
      bitField0_ = (bitField0_ & ~0x00000100);
      ballAge_ = 0;
      onChanged();
      return this;
    }

    private float ballDist_ ;
    /**
     * <code>optional float ball_dist = 10;</code>
     */
    public boolean hasBallDist() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float ball_dist = 10;</code>
     */
    public float getBallDist() {
      return ballDist_;
    }
    /**
     * <code>optional float ball_dist = 10;</code>
     */
    public Builder setBallDist(float value) {
      bitField0_ |= 0x00000200;
      ballDist_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float ball_dist = 10;</code>
     */
    public Builder clearBallDist() {
      bitField0_ = (bitField0_ & ~0x00000200);
      ballDist_ = 0F;
      onChanged();
      return this;
    }

    private float ballBearing_ ;
    /**
     * <code>optional float ball_bearing = 11;</code>
     */
    public boolean hasBallBearing() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float ball_bearing = 11;</code>
     */
    public float getBallBearing() {
      return ballBearing_;
    }
    /**
     * <code>optional float ball_bearing = 11;</code>
     */
    public Builder setBallBearing(float value) {
      bitField0_ |= 0x00000400;
      ballBearing_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float ball_bearing = 11;</code>
     */
    public Builder clearBallBearing() {
      bitField0_ = (bitField0_ & ~0x00000400);
      ballBearing_ = 0F;
      onChanged();
      return this;
    }

    private float ballVelX_ ;
    /**
     * <code>optional float ball_vel_x = 12;</code>
     */
    public boolean hasBallVelX() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float ball_vel_x = 12;</code>
     */
    public float getBallVelX() {
      return ballVelX_;
    }
    /**
     * <code>optional float ball_vel_x = 12;</code>
     */
    public Builder setBallVelX(float value) {
      bitField0_ |= 0x00000800;
      ballVelX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float ball_vel_x = 12;</code>
     */
    public Builder clearBallVelX() {
      bitField0_ = (bitField0_ & ~0x00000800);
      ballVelX_ = 0F;
      onChanged();
      return this;
    }

    private float ballVelY_ ;
    /**
     * <code>optional float ball_vel_y = 13;</code>
     */
    public boolean hasBallVelY() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float ball_vel_y = 13;</code>
     */
    public float getBallVelY() {
      return ballVelY_;
    }
    /**
     * <code>optional float ball_vel_y = 13;</code>
     */
    public Builder setBallVelY(float value) {
      bitField0_ |= 0x00001000;
      ballVelY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float ball_vel_y = 13;</code>
     */
    public Builder clearBallVelY() {
      bitField0_ = (bitField0_ & ~0x00001000);
      ballVelY_ = 0F;
      onChanged();
      return this;
    }

    private float ballUncert_ ;
    /**
     * <code>optional float ball_uncert = 14;</code>
     */
    public boolean hasBallUncert() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float ball_uncert = 14;</code>
     */
    public float getBallUncert() {
      return ballUncert_;
    }
    /**
     * <code>optional float ball_uncert = 14;</code>
     */
    public Builder setBallUncert(float value) {
      bitField0_ |= 0x00002000;
      ballUncert_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float ball_uncert = 14;</code>
     */
    public Builder clearBallUncert() {
      bitField0_ = (bitField0_ & ~0x00002000);
      ballUncert_ = 0F;
      onChanged();
      return this;
    }

    private int role_ ;
    /**
     * <code>optional int32 role = 15;</code>
     */
    public boolean hasRole() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 role = 15;</code>
     */
    public int getRole() {
      return role_;
    }
    /**
     * <code>optional int32 role = 15;</code>
     */
    public Builder setRole(int value) {
      bitField0_ |= 0x00004000;
      role_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 role = 15;</code>
     */
    public Builder clearRole() {
      bitField0_ = (bitField0_ & ~0x00004000);
      role_ = 0;
      onChanged();
      return this;
    }

    private boolean inKickingState_ ;
    /**
     * <code>optional bool in_kicking_state = 16;</code>
     */
    public boolean hasInKickingState() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional bool in_kicking_state = 16;</code>
     */
    public boolean getInKickingState() {
      return inKickingState_;
    }
    /**
     * <code>optional bool in_kicking_state = 16;</code>
     */
    public Builder setInKickingState(boolean value) {
      bitField0_ |= 0x00008000;
      inKickingState_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool in_kicking_state = 16;</code>
     */
    public Builder clearInKickingState() {
      bitField0_ = (bitField0_ & ~0x00008000);
      inKickingState_ = false;
      onChanged();
      return this;
    }

    private float kickingToX_ ;
    /**
     * <code>optional float kicking_to_x = 17;</code>
     */
    public boolean hasKickingToX() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float kicking_to_x = 17;</code>
     */
    public float getKickingToX() {
      return kickingToX_;
    }
    /**
     * <code>optional float kicking_to_x = 17;</code>
     */
    public Builder setKickingToX(float value) {
      bitField0_ |= 0x00010000;
      kickingToX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float kicking_to_x = 17;</code>
     */
    public Builder clearKickingToX() {
      bitField0_ = (bitField0_ & ~0x00010000);
      kickingToX_ = 0F;
      onChanged();
      return this;
    }

    private float kickingToY_ ;
    /**
     * <code>optional float kicking_to_y = 18;</code>
     */
    public boolean hasKickingToY() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float kicking_to_y = 18;</code>
     */
    public float getKickingToY() {
      return kickingToY_;
    }
    /**
     * <code>optional float kicking_to_y = 18;</code>
     */
    public Builder setKickingToY(float value) {
      bitField0_ |= 0x00020000;
      kickingToY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional float kicking_to_y = 18;</code>
     */
    public Builder clearKickingToY() {
      bitField0_ = (bitField0_ & ~0x00020000);
      kickingToY_ = 0F;
      onChanged();
      return this;
    }

    private boolean fallen_ ;
    /**
     * <code>optional bool fallen = 19;</code>
     */
    public boolean hasFallen() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional bool fallen = 19;</code>
     */
    public boolean getFallen() {
      return fallen_;
    }
    /**
     * <code>optional bool fallen = 19;</code>
     */
    public Builder setFallen(boolean value) {
      bitField0_ |= 0x00040000;
      fallen_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool fallen = 19;</code>
     */
    public Builder clearFallen() {
      bitField0_ = (bitField0_ & ~0x00040000);
      fallen_ = false;
      onChanged();
      return this;
    }

    private boolean active_ ;
    /**
     * <code>optional bool active = 20;</code>
     */
    public boolean hasActive() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional bool active = 20;</code>
     */
    public boolean getActive() {
      return active_;
    }
    /**
     * <code>optional bool active = 20;</code>
     */
    public Builder setActive(boolean value) {
      bitField0_ |= 0x00080000;
      active_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool active = 20;</code>
     */
    public Builder clearActive() {
      bitField0_ = (bitField0_ & ~0x00080000);
      active_ = false;
      onChanged();
      return this;
    }

    private boolean claimedBall_ ;
    /**
     * <code>optional bool claimed_ball = 21;</code>
     */
    public boolean hasClaimedBall() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional bool claimed_ball = 21;</code>
     */
    public boolean getClaimedBall() {
      return claimedBall_;
    }
    /**
     * <code>optional bool claimed_ball = 21;</code>
     */
    public Builder setClaimedBall(boolean value) {
      bitField0_ |= 0x00100000;
      claimedBall_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool claimed_ball = 21;</code>
     */
    public Builder clearClaimedBall() {
      bitField0_ = (bitField0_ & ~0x00100000);
      claimedBall_ = false;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:messages.WorldModel)
  }

  static {
    defaultInstance = new WorldModel(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:messages.WorldModel)
}

