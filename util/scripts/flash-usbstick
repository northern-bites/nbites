#!/usr/bin/env bash
##
## Author(s):
##  - Cedric GESTES <gestes@aldebaran-robotics.com>
##  - MASSOT JULIEN <jmassot@aldebran-robotics.com>
## Copyright (C) 2008 Aldebaran Robotics
##

VERSION="1.0"
FDEV=""
FORCE=""
VERIFY=0


BINDIR=$(dirname "$(readlink -f $0 2>/dev/null)")/
DATADIR="$BINDIR/../share/flash-usbstick/"

#enable in source tree mode!
if [ -f $BINDIR/first_sector_2GB.raw -a -f $BINDIR/first_sector_1GB.raw ]; then
  DATADIR=$BINDIR
fi

debug() {
  if [ $DEBUG_VERBOSE -lt 5 ] ; then
    return
  fi
  tput setf 3
  echo -n "debug  : "
  tput sgr0
  echo "$@"
}

message() {
  if [ $DEBUG_VERBOSE -lt 4 ] ; then
    return
  fi
#   tput setf 2
#   echo -n "mesg   : "
#   tput sgr0
  echo "$@"
}

warning() {
  if [ $DEBUG_VERBOSE -lt 3 ] ; then
    return
  fi
  tput setf 6
  echo -n "warning: "
  tput sgr0
  echo "$@"
}

error() {
  tput setf 4
  echo -n "error  : "
  tput sgr0
  echo "$@"
}

fatal() {
  tput setf 4
  echo -n "fatal  : "
  tput sgr0
  echo "$@"
  exit 1
}

check_app() {
  local app="$1"
  local comment="$2"
  if ! which $app 2>/dev/null >/dev/null ; then
    fatal "Can't find the command '$app' on your system !!!!"
    fatal "$comment"
    return 1
  fi
}


usage() {
  echo "usage: flash-usbstick [-h] [-f] [-v] [-V] [-d <dev>] <image.ext3.gz>"
  echo "Version: ${VERSION}"
  echo "Options:"
  echo "  <image.ext3>   : the image to flash on the drive"
  echo "  <dev>          : should be the name of a drive (eg sda or sdb,...)"
  echo "                   not the full path..."
  echo "  -d             : use the device <dev>"
  echo "  -f             : FORCE!! be carefull you can erase your hard drive"
  echo "  -V             : verify the content of the key (use image.ext3.gz.md5)"
  echo "  -v             : version"
  exit 1
}

parse_option() {
  while getopts hfvVd: opt ; do
    case "$opt" in
      d)
        FDEV="$OPTARG"
        ;;
      f)
        FORCE=42
        ;;
      [?]|h|v)
        usage
        ;;
      V)
        VERIFY=1
        ;;
    esac
  done
  shift $(($OPTIND-1))

  if ! [ $# -eq 1 ] ; then
    error "bad number of argument"
    usage
  fi
  IMAGE=$1

}


##MAIN

checkroot() {
  if [ x$(whoami) != xroot ]; then
    fatal "you should be root to launch this program"
  fi
}


getdevkey() {
  SCSI_ID=$(dmesg |grep -e Kingmax |sed 's/^.*scsi \([0-9]*:[0-9]*:[0-9]*:[0-9]*:\).*$/\1/' | tail -1)

  if [ x$SCSI_ID = x ] ; then
    fatal "Error: no kingmax flashdrive found"
  fi

  dev=$(dmesg |grep $SCSI_ID| grep "removable disk"| sed 's/.*\[\([a-z]*\)\].*$/\1/' | tail -1)

  if [ x$dev = x ] ; then
    fatal "Error: no kingmax flashdrive found"
  fi
  echo $dev
}


checkdevice() {
  local dev=$1

  DEVSIZE=$(grep -e "${dev}$" /proc/partitions |sed 's/[ ]\+/ /g' |cut -f 4 -d ' ')

  DEVLIST=$(grep -e "${dev}" /proc/partitions|sed 's/[ ]\+/ /g' |cut -f 5 -d ' ' | grep '[0-9]')

  message "Detected device: $dev, size: $DEVSIZE octets"
  if [ "x${dev}" = x ] || [ "x${DEVSIZE}" = x ] ; then
    fatal "no valid device found"
  fi

  if ! [ "x$FORCE" = "x42" ] ; then
    if ! [ "${DEVSIZE}" -le 17000000 ] ; then
      fatal "size too big for the flashdrive detected"
    fi
  fi

  for i in ${DEVLIST} ; do
    if mount | grep $i >/dev/null 2>/dev/null; then
      fatal "Please umount: /dev/$i"
    fi
  done;
}

writedevice() {
  local image=$1
  local dev=$2
  message "writing to the flashdrive, this may take some time..."
  if [ ${DEVSIZE} -gt 1800000 ]; then
    if [ -f $DATADIR/first_sector_2GB.raw ];then

      message "write MBR for usbstick 2G"
      dd if="$DATADIR/first_sector_2GB.raw" of="/dev/${dev}" bs=16k || exit 1
    else
      message "You need file : first_sector_1GB.raw" && exit 1
    fi
  else
    if [ -f $DATADIR/first_sector_1GB.raw ]; then
      message "write MBR for usbstick 1G"
      dd if="$DATADIR/first_sector_1GB.raw" of="/dev/${dev}" bs=16k || exit 1
    else
      message "You need file : first_sector_1GB.raw" && exit 1
    fi
  fi
  message "writing system"
  gzip -dc ${image} | dd of="/dev/${dev}" bs=16k seek=1 conv=notrunc       || exit 1
#   sfdisk -R "/dev/${DEV}" 2>/dev/null
#   dd if="${image}" of="/dev/${dev}1"                    || exit 1
  message "syncing writes"
  sync
  message "writing completed"
  echo ""
}

verifydevice() {
  local image="$1"
  local dev="$2"

  if [ ! -e ${image}.md5 ];
  then
    fatal "Could not find the original checksum \`${image}.md5'"
  fi

  MD5_O=`cat ${image}.md5 | sed "s/^\([0-9a-f]*\).*$/\1/"`
  cdev="/dev/${dev}"

  message "starting verification of the flashdrive"
  SIZE=`du -b ${image} | sed "s/^\([0-9]*\).*$/\1/"`
  MD5_C=`dd if=${cdev} of=/dev/stdout bs=${SIZE} count=1 2> /dev/null | md5sum | sed "s/^\([0-9a-f]*\).*$/\1/"`

  debug "orignal  crc: ${MD5_O}"
  debug "computed crc: ${MD5_C}"
  if [ "${MD5_C}" != "${MD5_O}" ]; then
    fatal "checksums don't match!"
  else
    message "verification complete"
  fi
}
destroyhome(){
  local image="$1"
  local dev="$2"
  # do something very strange :
  # to be sure the second part is really out of order
  # this partition will be repair on boot
  # I choose to use a strange block size 15*1025
  echo "${image}"
  echo "/dev/${dev}"
  #dd if=/dev/zero of="/dev/${dev}" bs=1M seek=475 2>/dev/null >/dev/null

}

#MAIN PROGRAM
if [ "$DEBUG_VERBOSE" = "" ] ; then
  DEBUG_VERBOSE=4
fi

#check_app "mkfs.vfat" "tools to create fat32 partition"
check_app "dd"     "tools to do binary copy"
check_app "mktemp" "tools to create temp file and dir"
check_app "whoami" "know which user is running the current process"
check_app "sfdisk" "reload the partition table"

parse_option $@
debug "image : $IMAGE"
debug "force : $FDEV"
debug "verify: $VERIFY"

checkroot

if [ "x$FDEV" = x ] ; then
  DEV=$(getdevkey)
else
  #device forced, we check if the block device exist (try /dev/$truc and $truc)
  DEV="$FDEV"
  if ! [ -b "/dev/$DEV" ] ; then
    DEV=$(basename $FDEV)
    if ! [ -b "/dev/$DEV" ] ; then
      echo "please specify a valid block device, $FDEV doesnt not exist"
      exit 1;
    fi
  fi
fi

if ! [ -f "$IMAGE" ] ; then
  fatal "please specify a valid image location : $IMAGE doesnt not exist."
fi

checkdevice "$DEV"
destroyhome "$IMAGE" "$DEV"
writedevice "$IMAGE" "$DEV"
if [ "$VERIFY" = "1" ] ; then
  verifydevice "$IMAGE" "$DEV"
fi
message "operation completed, you can remove your key"

